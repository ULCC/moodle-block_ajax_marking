// JavaScript Document for including in the AJAX marking block

AJAXmarking = {


    //var nodesArray = '';              // this is what holds the data that comes back from the ajax calls
    aidHolder : '',               // this holds the assessment id so it can be accessed by other functions
    sidHolder : '',               // this holds the submission id so it can be accessed by other functions.
                                      // the above 2 variables sometimes hold different things e.g. user id or submission
                                                                      // record id, depending on what sort of node it is
     nodeHolder : '',             // this holds the parent node so it can be referenced by other functions
     compHolder : '',              // this holds the callback function of the parent node so it can be called once all the child nodes have been built
     checkVar : 6,
    //var root = '';                    // holds the root node of the tree so it can be refreshed and have children added
    //var tree = '';                    // the entire tree as a variable
    //var href = '';                    // holds the link for the onclick - not used any more??
    totalCount : 0,               // all pieces of work to be marked. Updated dynamically by altering this.
    valueDiv : '',             // the div that hold totalCount
    //var amVariables.wwwroot = '';                 // These are variables that hold the language strings generated by php at the start
    //var theme = '';
    //var userid = '';
    //var forumString = '';
    //var assignmentString = '';
    //var workshopString = '';
    //var assignmentWorkString = '';
    //var workshopWorkString = '';
    //var totalMessage = '';
    //var collapseString = '';
    //var nothingString = '';
    //var quizSaveString = '';
    windowobj : '',                // this is the variable used by the openPopup function on the front page. We make it a global
                                       // so we can access the pop up window using DOM later
    // this holds the timer that keeps trying to add the onclick stuff to the pop ups as the pop up loads
    timerVar : '',
    // same but for closing the frames for a workshop
    frameTimerVar : '',
    t : 0,

    main : '',
    config : '',
    //var amVariables = '';
    //am_go();
    //img = '<img id="loader" src="'+amVariables.wwwroot+'/lib/yui/treeview/assets/loading.gif" alt=\"loading\" />';
    //alert ('img');
    img : '<img id="loader" src="'+amVariables.wwwroot+'/blocks/ajax_marking/images/ajax-loader.gif" alt=\"loading\" />',


     /**
      * just moved out from ajaxtree, this needs:
      * @ the tree icon div
      * @ the tree div for construction
      * @ the tree loadcounter (what was this for?)
      * @ the tree ajaxcallback function (same for both?)
      */

     ajaxBuild : function(tree) {
        
                  var sUrl = '';
                  if (tree.loadCounter === 0) {
                          //var img = '<img id="loader" src="'+amVariables.wwwroot+'/lib/yui/treeview/assets/loading.gif" alt=\"loading\" />';
                          tree.icon.innerHTML = AJAXmarking.img;

                          if (tree.treeDiv == 'configTree') { // if this is the config tree, we need to ask for config_courses
                              sUrl = amVariables.wwwroot+'/blocks/ajax_marking/ajax.php?id='+amVariables.userid+'&type=config_main&userid='+amVariables.userid+'';
                          } else {
                              sUrl = amVariables.wwwroot+'/blocks/ajax_marking/ajax.php?id='+amVariables.userid+'&type=main&userid='+amVariables.userid+'';
                          }

                          var request = YAHOO.util.Connect.asyncRequest('GET', sUrl, AMajaxCallback);
                          tree.loadCounter = 1;
                  }
          },



  /**
   * ajax success function which checks the data coming in and calls the right function.
   * @
   */



  AJAXsuccess : function (o) {
              // alert('ajax success');
                  var type = null;
                  var responseArray = null;

                  // uncomment for debugging output at top of block
                  // if (userid == 2) {
                  //   var checkDiv = document.getElementById("total");
                  //   checkDiv.innerHTML = o.responseText;
                  // }
                  //alert(o.responseText);

                  responseArray = eval(o.responseText);

                  type = responseArray[0].type; // fist object holds data about what kind of nodes we have so we can fire the right function.
                  responseArray.shift(); // remove the data object, leaving just the node objects

                  switch (type) {

                  case 'main':
                         // alert('main courses');
                          AJAXmarking.makeCourseNodes(responseArray, AJAXmarking.main);
                          //ie_width();
                          break;

                  case 'course':
                         
                          AJAXmarking.makeAssessmentNodes(responseArray, AJAXmarking.main);
                          AJAXmarking.ie_width();
                          break;

                  case 'quiz_question':
                        AJAXmarking.makeAssessmentNodes(responseArray, AJAXmarking.main);
                       // ie_width();
                        break;

                  case 'groups':

                          AJAXmarking.makeGroupNodes(responseArray, AJAXmarking.main);
                         // ie_width();
                          break;

                  case 'submissions':

                          AJAXmarking.makeSubmissionNodes(responseArray, AJAXmarking.main);
                         // ie_width();
                          break;

                  case 'config_main':
                          //alert('config main');
                          AJAXmarking.makeCourseNodes(responseArray, AJAXmarking.config);
                          break;

                  case 'config_course':

                          AJAXmarking.makeAssessmentNodes(responseArray, AJAXmarking.config);
                          break;

                  case 'config_groups':

                          AJAXmarking.makeGroupsList(responseArray, AJAXmarking.config);
                          break;

                  case 'config_set': //just need to un-disable the radio button

                          if (responseArray[0].value === false) {
                                  AJAXmarking.config.status.innerHTML = 'AJAX error';
                          } else {
                                  AJAXmarking.enableRadio();
                          }
                          break;

                  case 'config_check':

                          var checkId = 'config'+responseArray[0].value; // make the id of the radio button div
                          //alert(responseArray[0].value);
                          document.getElementById(checkId).checked = true; // make the radio button on screen match the value in the database that was just returned.
                          //if its the groups one, make the groups bit
                          if (responseArray[0].value == 2) {
                                  responseArray.shift(); // remove the config bit leaving just the groups.
                                  AJAXmarking.makeGroupsList(responseArray); //make the groups bit
                          }
                          AJAXmarking.enableRadio(); //allow the radio buttons to be clicked again
                          break;

                  case 'config_group_save':

                          if (responseArray[0].value === false) {
                                  AJAXmarking.config.status.innerHTML = 'AJAX error';
                          } else {
                                  AJAXmarking.enableRadio();
                          }

                          break;

                  }// end switch

          },

          AJAXfailure : function (o)
          {
                  if (o.tId == -1) {
                          div.innerHTML =  amVariables.collapseString;
                  }
                  if (o.tId === 0) {
                          div.innerHTML = amVariables.connectFail;
                  }
          },

 

    // This is the main constructor function for the class that will form the marking tree. There are 2 types of tree - for both the main marking block and
    // the config screen, so this allows efficient code reuse.

     makeCourseNodes : function(nodesArray, tree) {
                 // alert('make');
                 // var nodesLeng = null;
                  var label = '';
                 //alert(typeof(AJAXmarking.main.tree.tree));
          /// make the array of nodes
                  var nodesLeng = nodesArray.length;

                  if (nodesLeng === 0) { // the array is empty, so say there is nothing to mark
                          if (tree.treeDiv === 'treediv') {
                                  tree.div.innerHTML = amVariables.configNothingString;
                                  tree.icon.innerHTML = '';
                          } else {
                                  tree.div.innerHTML = amVariables.nothingString;
                                  tree.icon.innerHTML = '';
                          }
                  }
                  else { // there is a tree to be drawn

          /// cycle through the array and make the nodes
                         var i = 0;
                          for (n=0;n<nodesLeng;n++) {
                                  if (!this.config) { //only show the marking totals if its not a config tree
                                          label = nodesArray[n].name+' ('+nodesArray[n].count+')';
                                  } else {
                                          label = nodesArray[n].name;
                                  }
                                  var myobj = { label: ''+label+'',
                                                id:''+nodesArray[n].id+'',
                                                type:''+nodesArray[n].type+'',
                                                count:''+nodesArray[n].count+'',
                                                cid:''+nodesArray[n].cid+'',
                                                uniqueId:''+nodesArray[n].cid+'',
                                                name:''+nodesArray[n].name+'',
                                                summary:''+nodesArray[n].summary+'',
                                                title:''+nodesArray[n].summary

                                              };

                                  var tmpNode1 = new YAHOO.widget.TextNode(myobj, tree.root, false);
                                  tmpNode1.labelStyle = 'icon-course';
                                  tmpNode1.setDynamicLoad(AJAXmarking.loadNodeData);
                          }

          /// now make the tree, add the total at the top and remove the loading icon

                            // alert('pre-render');
                          tree.tree.render();
                          tree.icon.innerHTML = '';
                          
                  // add click events

                          if (tree.treeDiv == 'treediv') {

                              document.getElementById('totalmessage').innerHTML = amVariables.totalMessage+':&nbsp;';
                              AJAXmarking.updateTotal();


                              tree.tree.subscribe("clickEvent", function(oArgs) {
                               //  alert('clicked');
                                // ref saves space
                                var nd = oArgs.node;

                                // putting window.open into the switch statement causes it to fail in IE6. No idea why.
                                var popUpAddress = amVariables.wwwroot;
                                var popUpArgs = 'menubar=0,location=0,scrollbars,resizable,width=780,height=500';
                                var timerFunction = '';


                                switch (nd.data.type) {

                                    case 'quiz_answer':

                                          popUpAddress += '/mod/quiz/report.php?mode=grading&action=grade&q='+nd.parent.parent.data.id+'&questionid='+nd.data.aid+'&userid='+nd.data.sid+'';
                                          timerFunction = 'AJAXmarking.quizOnLoad(\''+nd.data.id+'\')';
                                      break;

                                    case 'assignment_answer':

                                        popUpAddress += '/mod/assignment/submissions.php?id='+nd.data.aid+'&userid='+nd.data.sid+'&mode=single&offset=0';
                                        timerFunction = 'AJAXmarking.assignmentOnLoad(\''+nd.data.id+'\')';
                                      break;

                                   case 'workshop_answer':

                                          popUpAddress += '/mod/workshop/assess.php?id='+nd.data.aid+'&sid='+nd.data.sid+'&redirect='+amVariables.wwwroot+'';
                                          timerFunction = 'AJAXmarking.workshopOnLoad(\''+nd.data.id+'\')';
                                      break;

                                   case 'discussion':

                                          popUpAddress += '/mod/forum/discuss.php?d='+nd.data.aid+'#p'+nd.data.sid+'';
                                          timerFunction = 'AJAXmarking.forumOnLoad(\''+nd.data.id+'\')';
                                      break;

                                   case 'journal_submission':

                                         popUpAddress += '/mod/journal/report.php?id='+nd.data.id+'';
                                         timerFunction = 'AJAXmarking.journalOnload(\''+nd.data.assid+'\', \''+nd.parent.data.cid+'\')';
                                      break;
                                   } //end switch

                                   if (timerFunction != '') {
                                      // alert(AJAXmarking.checkVar);
                                       AJAXmarking.windowobj = window.open(popUpAddress, '_blank', popUpArgs);
                                       AJAXmarking.timerVar = window.setInterval(timerFunction, 500);
                                       AJAXmarking.windowobj.focus();
                                       return false;
                                   }

                      }); // end subscribe
                  } else {
                     //  if (this.config === true) { // set the onclick to be the function that populates the config div

                        tree.tree.subscribe('clickEvent', function(oArgs) {

                          var title = document.getElementById('configInstructions');
                          var check = document.getElementById('configshowform');
                          var groups = document.getElementById('configGroups');
                          AJAXmarking.clearGroupConfig();

                          if (oArgs.node.data.type == 'config_course') {
                              title.innerHTML = '';
                          } else {
                              title.innerHTML = oArgs.node.data.name;
                          }

                          if (oArgs.node.data.type !== 'config_course') {
                              check.style.color = '#AAA';

                              var hidden1 = document.createElement('input');
                                      hidden1.type  = 'hidden';
                                      hidden1.name  = 'course';
                                      hidden1.value = oArgs.node.parent.data.id;
                              check.appendChild(hidden1);
                              var hidden2 = document.createElement('input');

                                      hidden2.setAttribute('type', 'hidden');
                                      hidden2.setAttribute('name', 'assessment');
                                     // hidden2.id = 'assessment';
                                      hidden2.setAttribute('value', oArgs.node.data.id);
                              check.appendChild(hidden2);
                              var hidden3 = document.createElement('input');
                                      hidden3.type  = 'hidden';
                                      hidden3.name  = 'assessmenttype';
                                      hidden3.value = oArgs.node.data.type;
                              check.appendChild(hidden3);

                              // fixes nasty IE6 bug: http://cf-bill.blogspot.com/2006/03/another-ie-gotcha-dynamiclly-created.html
                              try{
                                  box1 = document.createElement('<input type="radio" name="showhide" />');
                              }catch(err){
                                  box1 = document.createElement('input');
                              }
                                  box1.setAttribute('type','radio');
                                  box1.setAttribute('name','showhide');
                             // var box1 = document.createElement('input');
                             //         box1.type  = 'radio';
                              //        box1.name  = 'showhide';

                                      box1.value = 'show';
                                      box1.id    = 'config1';
                                     // box1.disabled = true;
                                      box1.onclick = function() {AJAXmarking.showHideChanges(this);};
                                     check.appendChild(box1);
                                   //  box1.defaultChecked = false;
                              var box1text = document.createTextNode('Show');
                              check.appendChild(box1text);
                              var breaker = document.createElement('br');
                              check.appendChild(breaker);

                              try{
                                  box2 = document.createElement('<input type="radio" name="showhide" />');
                              }catch(err){
                                  box2 = document.createElement('input');
                              }
                                  box2.setAttribute('type','radio');
                                  box2.setAttribute('name','showhide');
                             // var box2 = document.createElement('input');
                                      //box2.type  = 'radio';
                                     // box2.name  = 'showhide';

                                      box2.value = 'groups';
                                      box2.id    = 'config2';
                                      box2.disabled = true;
                                      box2.onclick = function() {AJAXmarking.showHideChanges(this);};
                              check.appendChild(box2);
                                //box2.defaultChecked = false;
                              var box2text = document.createTextNode('Show by group');
                              check.appendChild(box2text);
                              var breaker2 = document.createElement('br');
                              check.appendChild(breaker2);


                              try{
                                  box3 = document.createElement('<input type="radio" name="showhide" />');
                              }catch(err){
                                  box3 = document.createElement('input');
                              }
                                  box3.setAttribute('type','radio');
                                  box3.setAttribute('name','showhide');
                             // var box3 = document.createElement('input');
                                     // box3.type  = 'radio';
                                     // box3.name  = 'showhide';

                                      box3.value = 'hide';
                                      box3.id    = 'config3';
                                      box3.disabled = true;
                                      box3.onclick = function() {AJAXmarking.showHideChanges(this);};
                              check.appendChild(box3);
                             // box3.defaultChecked = false;
                              var box3text = document.createTextNode('Hide');
                              check.appendChild(box3text);
                              //check.normalize();
                               }
                              // now, we need to find out what the current group mode is and display that box as checked.
                              var checkUrl = amVariables.wwwroot+'/blocks/ajax_marking/ajax.php?id='+oArgs.node.parent.data.id+'&assessmenttype='+oArgs.node.data.type+'&assessmentid='+oArgs.node.data.id+'&userid='+amVariables.userid+'&type=config_check';
                              var request = YAHOO.util.Connect.asyncRequest('GET', checkUrl, AMajaxCallback);


                          //document.getElementById('box3').onclick = function() {showHideChanges();};
                          return false;
                      }


                  ); //end tree.subscribe
                }// end else
                 // this.tooltips();
              } //end else
          }, //end function

      tooltips : function(tree) {
          //	alert('tooltips');
                  var name = navigator.appName;
                  if (name.search('iPhone') == -1) {
                  // this is disabled for IE because, although useful, in IE6 (assuming others too) the tooltips seem to sometimes remain as an invisible div on top
                  // of the tree structure once nodes has expanded, so that some of the child nodes are unclickable. Firefox is ok with it. This is a pain
                  // because a person may not remember the full details of the assignment that was set and a tooltip is better than leaving the front page.
                  // I will re-enable it once I find a fix

                          var i = 0;
                          var j = 0;
                          var k = 0;
                          var m = 0;
                          var n = 0;
                          var control = '';
                          if (tree.div != 'treeDiv') {
                                  //control = document.getElementById('config_tree_control');
                                  return false;
                          //} else {
                          //	control = document.getElementById('tree_control');
                          }
                  /// 1. all courses loop
                          var numberOfCourses = tree.root.children.length;
                          for (i=0;i<numberOfCourses;i++) {
                              node = tree.root.children[i];
                              AJAXmarking.make_tooltip(node);
                              var numberOfAssessments = tree.root.children[i].children.length;
                              for (j=0;j<numberOfAssessments;j++) {
                                  // assessment level
                                  node = tree.root.children[i].children[j];
                                  AJAXmarking.make_tooltip(node);
                                  var numberOfThirdLevelNodes = tree.root.children[i].children[j].children.length;
                                  for (k=0;k<numberOfThirdLevelNodes;k++) {
                                      // users level (or groups)
                                      node = tree.root.children[i].children[j].children[k];
                                      check = node.data.time;
                                      if (typeof(check) !== null) {
                                          AJAXmarking.make_tooltip(node);
                                      }
                                      var numberOfFourthLevelNodes = node.children.length;
                                      for (m=0;m<numberOfFourthLevelNodes;m++) {
                                          node = tree.root.children[i].children[j].children[k].children[m];
                                          AJAXmarking.make_tooltip(node);
                                          var numberOfFifthLevelNodes = node.children.length;
                                          for (n=0;n<numberOfFifthLevelNodes;n++) {
                                             node = tree.root.children[i].children[j].children[k].children[m].children[n];
                                             AJAXmarking.make_tooltip(node);
                                         }
                                      }
                                  }
                              }
                          }
                          return true;
                  }
          },


      /**
       * This function enables the config popup radio buttons again after the AJAX request has
       * returned a success code.
       *
       */

      enableRadio : function() {
                  var h ='';
                  var radio = document.getElementById('configshowform');
                  radio.style.color = '#000';

                  for (h = 0; h < radio.childNodes.length; h++) {
                      if (radio.childNodes[h].name == 'showhide') {
                          radio.childNodes[h].setAttribute ('disabled', false);
                          radio.childNodes[h].disabled = false;

                      }
                  }
                  var groupDiv = document.getElementById('configGroups');
                  groupDiv.style.color = '#000';

                  for (h = 0; h < groupDiv.childNodes.length; h++) {
                      if (groupDiv.childNodes[h].type == 'checkbox') {
                          groupDiv.childNodes[h].setAttribute ('disabled', false);
                          groupDiv.childNodes[h].disabled = false;
                      }
                  }

          },

          /**
           * This function disables the radio buttons when AJAX request is sent
           */

          disableRadio : function() {
                  var h ='';
                  var radio = document.getElementById('configshowform');
                  radio.style.color = '#AAA';

                  for (h = 0; h < radio.childNodes.length; h++) {
                      if (radio.childNodes[h].type == 'radio') {
                          radio.childNodes[h].setAttribute ('disabled',  true);

                      }
                  }
                  var groupDiv = document.getElementById('configGroups');
                  groupDiv.style.color = '#AAA';

                  for (h = 0; h < groupDiv.childNodes.length; h++) {
                      if (groupDiv.childNodes[h].type == 'checkbox') {
                          groupDiv.childNodes[h].setAttribute ('disabled', true);
                      }
                  }
          },


          /**
           * this function is called when a node is clicked (expanded) and makes the ajax request
           */

          loadNodeData : function(node, onCompleteCallback) {
             //alert('loadnode');
            /// store details of the node that has been clicked in globals for reference by later callback function
            AJAXmarking.nodeHolder = node;
            AJAXmarking.compHolder = onCompleteCallback;

            /// request data using AJAX
            var sUrl = amVariables.wwwroot+'/blocks/ajax_marking/ajax.php?id='+node.data.id+'&type='+node.data.type+'&userid='+amVariables.userid+'';

            if (typeof(node.data.gid) != 'undefined') { sUrl += '&group='+node.data.gid; } //add group id if its there
            if (node.data.type == 'quiz_question') { sUrl += '&quizid='+node.parent.data.id; } //add quiz id if this is a question node
            //alert(sUrl);
            var request = YAHOO.util.Connect.asyncRequest('GET', sUrl, AMajaxCallback);
          },



          /**
           * function to update the parent assessment node when it is refreshed dynamically so that
           * if more work has been found, or a piece has now been marked, the count for that label will be accurate
           */

          parentUpdate : function(tree, node) {

                  var counter = node.children.length;
                  //alert('length: '+counter);
                  //alert('type: '+node.data.type);
                  //alert('assid: '+node.data.assid);
                  if (counter === 0) {
                          tree.removeNode(node, true);
                  } else {

                          if (node.data.type == 'course' || node.children[0].data.gid != 'undefined' || node.data.type == 'forum' || node.data.type == 'quiz') { // we need to sum child counts

                                  var tempCount = 0;
                                  var tempStr = '';
                                  for (i=0;i<counter;i++) {

                                          tempStr = node.children[i].data.count;
                                          //alert('node count: '+tempStr);
                                          tempCount += parseInt(tempStr, 10);
                                  }
                                  //alert('total: '+tempCount);
                                  AJAXmarking.countAlter(node, tempCount);
                          } else { // its an assessment node, so we count the children
                                  AJAXmarking.countAlter(node, counter);
                          }

                          tree.root.refresh();

                  }
          },


         /**
          * function to create tooltips. When root.refresh() is called it somehow wipes
          * out all the tooltips, so it is necessary to rebuild them
          * each time part of the tree is collapsed or expanded
          * tooltips for the courses are a bit pointless, so its just the assignments and submissions
          *
          *
          * n.b. the width of the tooltips is fixed because not specifying it makes them go narrow in IE6. making them 100% works fine in IE6 but makes FF
          * stretch them across the whole page. 200px is a guess as to a good width for a 1024x768 screen based on the width of the block. Change it in both places below
          * if you don't like it
          *
          * IE problem - the tooltips appear to interfere with the submission nodes using ie, so that they are not always clickable, but only when the user
          * clicks the node text rather than the expand (+) icon. Its not related to the timings as using setTimeout to delay the generation of the tooltips
          * makes no difference
          */


          make_tooltip : function(node) {

              tempLabelEl = node.getLabelEl();
              tempText = node.data.summary;
              tempTooltip = new YAHOO.widget.Tooltip('tempTooltip', { context:tempLabelEl, text:tempText, showdelay:0, hidedelay:0, width:150, iframe:false, zIndex:1110} );

          },

         /**
          * function to build the assessment nodes once the AJAX request has returned a data object
          */

          makeAssessmentNodes : function(nodesArray, tree) {
          // uncomment for verbatim on screen output of the AJAX response for assessment and submission nodes
          // this.div.innerHTML += o.responseText;
          // alternatively, use the firebug extension for mozilla firefox - less messy.

                  var myobj = '';
                  var aidHolder = '';
                  var sidHolder = '';
                  var uniqueId = '';
                  var tmpNode2 = '';
                  var tmpNode3 = '';
                  var clickNode = '';
                  //var nodesLeng = '';
                  var label = '';

  /// First the courses array

                  var  nodesLeng = nodesArray.length;

  /// cycle through the array and make the nodes

                  for (m=0;m<nodesLeng;m++) {

  //////////////////////////////////
  /// its a node for an assessment
  //////////////////////////////////

  /// set the correct language strings for the tooltip summaries

                          switch (nodesArray[m].type) {

                          case 'assignment':
                                  nodesArray[m].summary = amVariables.assignmentString+' '+nodesArray[m].summary+'';
                                  break;
                          case 'workshop':
                                  nodesArray[m].summary = amVariables.workshopString+' '+nodesArray[m].summary+'';
                                  break;
                          case 'forum':
                                  nodesArray[m].summary = amVariables.forumString+' '+nodesArray[m].summary+'';
                                  break;
                          case 'quiz':
                                  nodesArray[m].summary = amVariables.quizString+' '+nodesArray[m].summary+'';
                                  break;
                          case 'journal':
                                  nodesArray[m].summary = amVariables.journalString+' '+nodesArray[m].summary+'';
                                  break;
                          case 'journal_submissions':
                                  nodesArray[m].summary = amVariables.journalString+' '+nodesArray[m].summary+'';
                                  break;
                          }

  /// make the label from the name and count (no need for the count if this is a config tree)
                          if (tree.treeDiv == 'treediv') {
                                  label = nodesArray[m].name+' ('+nodesArray[m].count+')';
                          } else {
                                  label = nodesArray[m].name;
                          }
                          //uniqueId = nodesArray[m].type+nodesArray[m].id + 'sid' + nodesArray[m].assid + ''; // unique id for removal - deprecated?

  /// put it all together into an object
                          if (nodesArray[m].type == 'quiz_question') {
                              myobj = { 
                                    label    : ''+label+'',
                                    id       : ''+nodesArray[m].id+'',
                                    type     : ''+nodesArray[m].type+'',
                                    assid    : ''+nodesArray[m].assid+'',
                                    uniqueId : ''+nodesArray[m].assid+'',
                                    count    : ''+nodesArray[m].count+'',
                                    name     : ''+nodesArray[m].name+'',
                                    title    : ''+nodesArray[m].summary+'',
                                    gid      : ''+nodesArray[m].group+''
                                  };
                          } else{
                          myobj = { 
                                    label    : ''+label+'',
                                    id       : ''+nodesArray[m].id+'',
                                    type     : ''+nodesArray[m].type+'',
                                    assid    : ''+nodesArray[m].assid+'',
                                    uniqueId : ''+nodesArray[m].assid+'',
                                    count    : ''+nodesArray[m].count+'',
                                    name     : ''+nodesArray[m].name+'',
                                    title    : ''+nodesArray[m].summary+''
                                  };
                          }

  /// use the object to create a new node
                          tmpNode2 = new YAHOO.widget.TextNode(myobj, AJAXmarking.nodeHolder , false);

  /// style the node acording to its type
                          switch (nodesArray[m].type) {

                          case 'assignment':
                                  tmpNode2.labelStyle = 'icon-assign';
                                  break;
                          case 'workshop':
                                  tmpNode2.labelStyle = 'icon-workshop';
                                  break;
                          case 'forum':
                                  tmpNode2.labelStyle = 'icon-forum';
                                  break;
                          case 'quiz_question':
                                  tmpNode2.labelStyle = 'icon-question';
                                  break;
                          case 'quiz':
                                  tmpNode2.labelStyle = 'icon-quiz';
                                  break;
                          case 'journal':
                                  tmpNode2.labelStyle = 'icon-journal';
                                  break;
                          }


                   // set the node to load data dynamically
                    if (tree.treeDiv == 'treediv') {
                       tmpNode2.setDynamicLoad(AJAXmarking.loadNodeData);
                    }
                    //}
  /// now, we need to update the parent node's label, in case the count of assessments/submissions
  /// has changed since the node was created

                  } //end of per-node loop
                  //
                  //don't do the totals if its a config tree
                  if (tree.treeDiv == 'treediv') {
                      AJAXmarking.parentUpdate(tree, AJAXmarking.nodeHolder );
                  }
                  //alert(this.name);


  /// finally, run the function that updates the original node and adds the children
                  //alert('before compholder');
                  AJAXmarking.compHolder();
                  //alert('after compholder');
                  AJAXmarking.updateTotal();

  /// then add tooltips.

                  //this.tooltips();

          },

      makeSubmissionNodes : function(nodesArray, tree) {

          ///////////////////////////////////////////
          /// we have a final node i.e. a submission
          //////////////////////////////////////////////

              var myobj = '';
              //var aidHolder = '';
              //var sidHolder = '';
              var uniqueId = '';
              var tmpNode2 = '';
              var tmpNode3 = '';
              var clickNode = '';
              var nodesLeng = '';
              //var typeHolder = '';

  /// First the courses array
              nodesLeng = nodesArray.length;

              for (var k=0;k<nodesLeng;k++) {

      /// set up a unique id so the node can be removed when needed

                  //aidHolder = ;
                  //sidHolder = ;
                  //typeHolder = ;
                  uniqueId = nodesArray[k].type + nodesArray[k].aid + 'sid' + nodesArray[k].sid + '';

  /// set up time-submitted thing for tooltip. This is set to make the time match the browser's local timezone,
  /// but I can't find a way to use the user's specified timezone from \$USER. Not sure if this really matters.

                  var secs = parseInt(nodesArray[k].seconds, 10);
                  var time = parseInt(nodesArray[k].time, 10)*1000; // javascript likes to work in miliseconds, whereas moodle uses unix format (whole seconds)
                  var d = new Date(); // make a new data object
                  d.setTime(time);  // set it to the time we just got above

                  var nodeCount = 0;
                  if (typeof(nodesArray[k].count) != 'undefined') { // Allows us to add a count for keeping track of forum submission accurately.
                          nodeCount = nodesArray[k].count;              // The other types don't need this.
                  }

  /// build the node as before

                  myobj = { label:''+nodesArray[k].name+'',
                            id:''+uniqueId+'',
                            type:''+nodesArray[k].type+'',
                            aid:''+nodesArray[k].aid+'',
                            uniqueId:''+uniqueId+'',
                            sid:''+nodesArray[k].sid+'',
                            title:''+nodesArray[k].summary+'',
                            count:''+nodeCount+''
                          } ;
                  if (nodesArray[k].type == 'discussion') {
                      myobj.label = myobj.label + ' (' + myobj.count + ')';
                  }
                  tmpNode3 = new YAHOO.widget.TextNode(myobj, AJAXmarking.nodeHolder , false);

  /// apply a style according to how long since it was submitted

                  if (secs < 21600) { // less than 6 hours
                          tmpNode3.labelStyle = 'icon-user-one';
                  } else if (secs < 43200) { // less than 12 hours
                          tmpNode3.labelStyle = 'icon-user-two';
                  } else if (secs < 86400) { // less than 24 hours
                          tmpNode3.labelStyle = 'icon-user-three';
                  } else if (secs < 172800) { // less than 48 hours
                          tmpNode3.labelStyle = 'icon-user-four';
                  } else if (secs < 432000) { // less than 5 days
                          tmpNode3.labelStyle = 'icon-user-five';
                  } else if (secs < 864000) { // less than 10 days
                          tmpNode3.labelStyle = 'icon-user-six';
                  } else if (secs < 1209600) { // less than 2 weeks
                          tmpNode3.labelStyle = 'icon-user-seven';
                  } else { // more than 2 weeks
                          tmpNode3.labelStyle = 'icon-user-eight';
                  }

              } // end for i

              // TODO - this needs to be a proper loop to account for varying lengths.
              AJAXmarking.parentUpdate(tree, AJAXmarking.nodeHolder);
              AJAXmarking.parentUpdate(tree, AJAXmarking.nodeHolder.parent); //might be a course, might be a group if its a quiz by groups
              if (!AJAXmarking.nodeHolder.parent.parent.isRoot()) {
                  this.parentUpdate(tree, AJAXmarking.nodeHolder.parent.parent);
                  if (!AJAXmarking.nodeHolder.parent.parent.parent.isRoot()) {
                      AJAXmarking.parentUpdate(tree, AJAXmarking.nodeHolder.parent.parent.parent);
                  }
              }

  /// finally, run the function that updates the original node and adds the children

              AJAXmarking.compHolder();
              AJAXmarking.updateTotal();

  /// then add tooltips.
  // alert(typeof(AJAXmarking.windowobj));

              //this.tooltips();

          },


          makeGroupNodes : function(responseArray) {
                  // need to turn the groups for this course into an array and attach it to the course node. Then make the groups bit on screen
                  // for the config screen??
                  //course = responseArray[0].course; // fist object holds data about what course the groups refer to
                  //responseArray.shift(); // remove the data object, leaving just the node objects
                  var object ='';
                  var arrayLength = responseArray.length;
                  var tmpNode4 = '';
                  var label = '';
                

                  for (var n =0; n<arrayLength; n++) {
                    

                      
                      uniqueId = 'group'+responseArray[n].gid+'';

                      label = responseArray[n].name+' ('+responseArray[n].count+')';
                      
                      object = { label:''+label+'',
                                 name:''+responseArray[n].name+'',
                                 id:''+responseArray[n].aid+'',
                                 type:''+responseArray[n].type+'',
                                 uniqueId:''+'g'+responseArray[n].gid+responseArray[n].type+responseArray[n].aid+'',
                                 gid:''+responseArray[n].gid+'',
                                 count:''+responseArray[n].count+'',
                                 title:''+responseArray[n].summary+''} ;
                      



                      tmpNode4 = new YAHOO.widget.TextNode(object, AJAXmarking.nodeHolder , false);
                     

                      tmpNode4.labelStyle = 'icon-group';
                     

                      // if the groups are for journals, it is impossible to display individuals, so we make the
                      // node clickable so that the pop up will have the group screen.
                      if (responseArray[n].type !== 'journal') {

                          tmpNode4.setDynamicLoad(this.loadNodeData);

                      }
                  }

                  AJAXmarking.parentUpdate(tree, AJAXmarking.nodeHolder);
                  AJAXmarking.parentUpdate(tree, AJAXmarking.nodeHolder.parent);
                  AJAXmarking.compHolder();
                  AJAXmarking.updateTotal();

                 
                  //this.tooltips();

          },


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          /// funtion to refresh all the nodes once the update operations have all been carried out by saveChangesAJAX()
         ///////////////////////////////////////////////////
          refreshRoot : function(tree) {
                  tree.root.refresh();
                  if (tree.root.children.length === 0) {
                          document.getElementById("totalmessage").innerHTML = '';
                          document.getElementById("count").innerHTML = '';
                          tree.div.innerHTML += amVariables.nothingString;
                  }
          },


    AJAXtree : function(treeDiv, icon, statusDiv, config) {

            this.loadCounter = 0;
           
            // YAHOO.widget.TreeView.preload();
            this.tree = new YAHOO.widget.TreeView(treeDiv);

            this.treeDiv = treeDiv;
            this.icon = document.getElementById(icon);
            this.div = document.getElementById(statusDiv);
            
            /// set the removal of all child nodes each time a node is collapsed (forces refresh)
            // not needed for config tree
            if (treeDiv == 'treediv') { // the this keyword gets confused and can't be used for this
              this.tree.subscribe('collapseComplete', function(node) {
                 AJAXmarking.main.tree.removeChildren(node);
              });
            } 

            this.root = this.tree.getRoot();
          
          //alert('end of ajaxtree');
       // this.tree = AJAXmarking.make_tree();
  }, // end AJAXtree build function



 ////////////////////////////////////////////////////////////////////////////////////////////////////////////
          /// funtion to refresh all the nodes once the operations have all been carried out - workshop frames version
          ////////////////////////////////////////////////////////////////////////////////////////////////////////////

          refreshRootFrames : function(tree) {
                   tree.root.refresh();
                   if (tree.root.children.length === 0) {
                           document.getElementById("totalmessage").innerHTML = '';
                           document.getElementById("count").innerHTML = '';
                           tree.div.innerHTML += amVariables.nothingString;
                  }
          },



          //////////////////////////////////////////////////////////////////////////////////
          // function to update the total marking count by a specified number and display it
          //////////////////////////////////////////////////////////////////////////////////

          updateTotal : function() {
                  //alert('update');
                  var count = 0;
                  var countTemp = 0;
                  //alert('upadtetotal root');
                  var childrenLength = AJAXmarking.main.root.children;

                  for (i=0;i<childrenLength.length;i++) {
                          countTemp = childrenLength[i].data.count;
                          count = count + parseInt(countTemp, 10);
                  }
                  if (count > 0) {
                          document.getElementById('count').innerHTML = ' <strong>'+count+'</strong>';
                  }
          },


          /////////////////////////////////////////////////////////////////////
          /// These functions are called from the marking pop-ups.
          //////////////////////////////////////////////////////////////////////



          /*
          this.saveChangesAJAXjournal = function(thisNodeId, parentNodeId) {

          /// remove the node that was just marked
                   var checkNode = "";
                   checkNode = tree.getNodeByProperty("assid", thisNodeId);
                   this.tree.removeNode(checkNode, true);

          /// get the parent node and alter its label count to have one less in the total count. Remove the node if the count is 0
                   var parentNode = "";
                   parentNode = this.tree.getNodeByProperty("cid", parentNodeId);
                   parentUpdate(parentNode);


          /// refresh the tree to redraw the nodes with the new labels
                   this.refreshRoot();
                   updateTotal();
                   tooltips();
          };
          */

          /**
           * this function updates the tree to remove the node of the pop up that has just been marked, then it updates the parent nodes and refreshes the tree
           *
           */

            saveChangesAJAX : function(loc, tree, thisNodeId, frames) {

                  var checkNode = "";
                  var parentNode = "";
                  var marker = 0;
                 // var tree = AJAXmarking.main;

          /// remove the node that was just marked

                   checkNode = tree.tree.getNodeByProperty("id", thisNodeId);
                   //alert(checkNode.parent.data.uniqueId);
                   //alert('index of parent: '+checkNode.parent.index);
                   parentNode = tree.tree.getNodeByIndex(checkNode.parent.index);
                   //parentNode = checkNode.parent;
                   tree.tree.removeNode(checkNode, true);
                  //alert('root data: '+this.root.data.type);
          /// get the parent node and alter its label count to have one less in the total count. Remove the node if the count is 0


                   while(marker === 0) {

                           AJAXmarking.parentUpdate(tree, parentNode);
                           if (parentNode.data.type == 'course') { // we have reached the course level, so stop
                                   marker = 1;
                           } else {
                           //not a course level node yet so carry on
                           newNode = tree.tree.getNodeByIndex(parentNode.parent.index); // go up one level
                           parentNode = newNode;
                           }
                   }

          /// refresh the tree to redraw the nodes with the new labels
                  if (typeof(frames) != 'undefined') {
                           AJAXmarking.refreshRootFrames();
                  } else {
                    AJAXmarking.refreshRoot(tree);
                  }
                   AJAXmarking.updateTotal();
                   AJAXmarking.tooltips();
                   if (loc != -1) { // no need if its an assignment
                       setTimeout(AJAXmarking.afterLoad(loc), 500);
                   }
          },

          /// this function updates the tree to remove the node of the pop up that has just been marked, then it updates the parent nodes and refreshes the tree
          // deprecated?
          /*
          this.saveChangesAJAXquiz = function(thisNodeId, parentNodeId, quizNodeId, courseNodeId) {

          //alert ('save ajax quiz fired');
          /// remove the node that was just marked
                   var checkNode = "";
                   checkNode = this.tree.getNodeByProperty("id", thisNodeId);
                   this.tree.removeNode(checkNode, true);

          /// get the parent node and alter its label count to have one less in the total count. Remove the node if the count is 0
                   var parentNode = "";
                   parentNode = this.tree.getNodeByProperty("assid", parentNodeId);
                   this.parentUpdate(parentNode);

          /// get the parent node and alter its label count to have one less in the total count. Remove the node if the count is 0
                   var quizNode = "";
                   parentNode = this.tree.getNodeByProperty("assid", quizNodeId);
                   this.parentUpdate(parentNode);

          /// now do the same for the course node
             //  alert('id= '+courseNodeId);
                   var courseNode = "";
                   courseNode = this.tree.getNodeByProperty("cid", courseNodeId);
                   this.parentUpdate(courseNode);

          /// refresh the tree to redraw the nodes with the new labels
                   this.refreshRoot();
                   this.updateTotal();
                   this.tooltips();
          };
          */
          ////////////////////////////////////////////////////////////////////////////////////////
          // same as the above function, but adjusted to work when called from the workshop frames
          ////////////////////////////////////////////////////////////////////////////////////////
          /*
          this.saveChangesAJAXFrames = function(thisNodeId, parentNodeId, courseNodeId) {

          /// remove the node that was just marked
                   var checkNode = "";
                   checkNode = this.tree.getNodeByProperty("id", thisNodeId);
                   this.tree.removeNode(checkNode, true);

          /// get the parent node and alter its label count to have one less in the total count. Remove the node if the count is 0
                   var parentNode = "";
                   parentNode = this.tree.getNodeByProperty("assid", parentNodeId);
                   this.parentUpdate(parentNode);

          /// now do the same for the course node

                   var courseNode = "";
                   courseNode = this.tree.getNodeByProperty("cid", courseNodeId);
                   this.parentUpdate(courseNode);


          /// refresh the tree to redraw the nodes with the new labels
                   this.refreshRootFrames();
                   this.updateTotal();
                   this.tooltips();
           };


          /// this function holds the original javascript from the save changes onclick for the Assignment pop up
          this.saveChangesAssignment = function() {
             document.getElementById('submitform').menuindex.value = document.getElementById('submitform').grade.selectedIndex;
             this.saveChangesAJAX();
          };
                  */
          /////////////////////////////////////////////////////////////////
          // Refresh tree function - for Collapse &amp; refresh link
          /////////////////////////////////////////////////////////////////

          refreshTree : function(treeObj) {
             // main.div.innerHTML = '';
                  treeObj.loadCounter = 0;
                  var treeDiv = treeObj.treeDiv;
                  var icon = treeObj.icon;
                  var status = treeObj.statusDiv;
                  //delete treeObj.tree;
                  treeObj.tree.removeChildren(treeObj.root);
                  // this.tree = '';
                  // tree.tree = new AJAXmarking.AJAXtree(treeDiv, icon, status);
                  // treeObj.tree = new YAHOO.widget.TreeView(treeDiv);
                  //treeObj.tree.subscribe('collapseComplete', function(node) {
                  //    this.tree.removeChildren(node);
                  //});
                  // tree.root = '';
                  // alert(tree.div);
                  treeObj.div.innerHTML = '';
                  treeObj.treeDiv.innerHTML = '';
                  AJAXmarking.ajaxBuild(treeObj);
          },


           makeGroupsList : function(data) { // uses the data returned by the ajax call (array of objects) from the checkbox onclick to make a checklist of groups
                  //alert('making groups list');
                  var groupDiv = document.getElementById('configGroups');
                  var dataLength = data.length;
                  var idCounter = 4;  //continue the numbering of the ids from 4 (main checkboxes are 1-3). This allows us to disable/enable them
                  for(var v=0;v<dataLength;v++) {


                           var box = '';
                           try{
                                  box = document.createElement('<input type="checkbox" name="showhide" />');
                              }catch(err){
                                  box = document.createElement('input');
                              }
                                  box.setAttribute('type','checkbox');
                                  box.setAttribute('name','groups');
                          //var box = document.createElement('input');
                                  //box.type = 'checkbox';
                                  box.id = 'config'+idCounter;
                                  //box.name = 'groups';
                                  box.value = data[v].id;
                                  groupDiv.appendChild(box);
                          if (data[v].display == 'true') {
                                  //alert('display true');
                                  box.checked = true;
                          } else {
                                  box.checked = false;
                          }

                          // silly IE6 hack
                          //groupDiv.innerHTML = groupDiv.innerHTML;

                          box.onclick =function() { AJAXmarking.boxOnClick();};
                          //box.onClick = function() { var temp = this.boxClick(); temp(); };

                          var label = document.createTextNode(data[v].name);
                          groupDiv.appendChild(label);
                          var breaker = document.createElement('br');
                          groupDiv.appendChild(breaker);
                          idCounter++;
                  }
                  AJAXmarking.config.icon.innerHTML = '';  //lose loading icon
                  AJAXmarking.enableRadio(); //re-enable the checkboxes
          },




       // this.ajaxCallback = ajaxCallback;
      // constructor stuff - makes a new tree where its told to

     


  ////////////////////////////////////////////////////////////////////////////////////////////////
  // function to alter a node's label with a new count once the children are removed or reloaded
  ////////////////////////////////////////////////////////////////////////////////////////////////

  countAlter : function (newNode, newCount) {
          var name = newNode.data.name;
          var newLabel = name+' ('+newCount+')';
          newNode.data.count = newCount;
          newNode.label = newLabel;
  },


  /**
   * on click function for the groups check boxes on the config screen. clicking sets or unsets
   * a particular group for display.
   */

 boxOnClick : function() {
     alert('boxonclick');
                var form = document.getElementById('configshowform');
               
                window.AJAXmarking.disableRadio();

                // hacky IE6 compatible fix
                for (c=0;c<form.childNodes.length;c++) {
                   switch (form.childNodes[c].name) {
                       case 'course':
                           var course = form.childNodes[c].value;
                           break;
                       case 'assessmenttype':
                           var assessmentType = form.childNodes[c].value;
                           break;
                       case 'assessment':
                           var assessment = form.childNodes[c].value;
                           break;
                    }
                }

                // need to construct a space separated list of group ids.
                var groupIds = '';
                var groupDiv = document.getElementById('configGroups');
                var groups = groupDiv.getElementsByTagName('input');
                var groupsLength = groups.length;
                //alert(groupsLength);
                for (var a=0;a<groupsLength;a++) {

                        if (groups[a].checked === true) {
                                //alert('true');
                                groupIds += groups[a].value+' ';
                        }

                }

                if (groupIds === '') { // there are no checked boxes
                        groupIds = 'none'; //don't leave the db field empty as it will cause confusion between no groups chosen and first time we set this.
                }

                var reqUrl = amVariables.wwwroot+'/blocks/ajax_marking/ajax.php?id='+course+'&assessmenttype='+assessmentType+'&assessmentid='+assessment+'&type=config_group_save&userid='+amVariables.userid+'&showhide=2&groups='+groupIds+'';

                var request = YAHOO.util.Connect.asyncRequest('GET', reqUrl, AMajaxCallback);
                //alert('data save');
        },

  //////////////////////////////////////////////////////////////////////////////////////
  // this function is called every 100 milliseconds once the assignment pop up is called
  // and tries to add the onclick handlers until it is successful. There are a few extra
  // checks in the following functions that appear to be redundant but which are
  // necessary to avoid errors.
  //////////////////////////////////////////////////////////////////////////////////////

  // NOTE: the offset system for saveandnext depends on the sort state having been stored in the $SESSION variable when the grading screen was accessed
  // (which may not have happened, as we are not coming from the submissions.phpgrading screen or may have been a while ago).
  // The sort reflects the last sort mode the user asked for when ordering the list of pop-ups, e.g. by clicking on the firstname column header.
  // I have not yet found a way to alter this variable using javascript - ideally, the sort would be the same as it is in the list presented in the marking block.
  // until a work around is found, the save and next function is be a bit wonky, sometimes showing next when there is only one submission, so I have hidden it.

  assignmentOnLoad: function(me, parent, course) {
          var els ='';
          var els2 = '';
          var els3 = '';
          AJAXmarking.t++;
          // alert(AJAXmarking.checkVar);
         // AJAXmarking.main.div.innerHML = 'worked';
        //  windowVar.focus();
          //windowVar.blur();
         // windowVar.close();
         //AJAXmarking.windowobj.focus();
         // var checkButton = AJAXmarking.windowobj.document.getElementsByName('submit');
          //var checkButton = AJAXmarking.windowobj.document;
          if (AJAXmarking.windowobj.document.getElementsByName) {
             
                  els = AJAXmarking.windowobj.document.getElementsByName('submit');
                   //alert (els.length);
                  if (els.length > 0) { // the above line will not return anything until the pop up is fully loaded
                          // the onclick carries out the functions that are already specified in lib.php, followed by the function to update the tree
                          var name = navigator.appName;
                          if (name == "Microsoft Internet Explorer") {
                              els[0]["onclick"] = new Function("AJAXmarking.windowobj.document.getElementById('submitform').menuindex.value = AJAXmarking.windowobj.document.getElementById('submitform').grade.selectedIndex; AJAXmarking.saveChangesAJAX(-1, AJAXmarking.main, '"+me+"', '"+parent+"', '"+course+"'); "); // IE
                          } else {
                              els[0].setAttribute("onClick", "document.getElementById('submitform').menuindex.value = document.getElementById('submitform').grade.selectedIndex; return window.opener.AJAXmarking.saveChangesAJAX(-1, AJAXmarking.main, '"+me+"', '"+parent+"', '"+course+"')"); // Mozilla etc.
                          }

                          //if (typeof(AJAXmarking.windowobj.document.getElementsByName('saveandnext')) != 'undefined') {// the saveandnext thing needs hiding
                                  els2 = AJAXmarking.windowobj.document.getElementsByName('saveandnext');
                                  if (els2.length > 0) {
                                          els2[0].style.display = "none";
                                          els3 = AJAXmarking.windowobj.document.getElementsByName('next');
                                          els3[0].style.display = "none";
                                  }
                         // }
                          window.clearInterval(AJAXmarking.timerVar); // cancel the loop for this function
                          //alert('cancelled');
                  }
          }
  },


  //////////////////////////////////////////////////////////////////
  // workshop pop up stuff
  //////////////////////////////////////////////////////////////////

  ///////////////////////////////////////////////////////////////////////////////////
  // function to add workshop onclick stuff and shut the pop up after its been graded.
  // the pop -up goes to a redirect to display the grade, so we have to wait until
  // then before closing it so that the grade is processed properly.
  ///////////////////////////////////////////////////////////////////////////////////

  // note: this looks odd because there are 2 things that needs doing, one after the pop up loads (add onclicks)and one after it goes to its redirect
  // (close window).it is easier to check for a fixed url (i.e. the redirect page) than to mess around with regex stuff to detect a dynamic url, so the
  // else will be met first, followed by the if. The loop will keep running whilst the pop up is open, so this is not very elegant or efficient, but
  // should not cause any problems unless the client is horribly slow. A better implementation will follow sometime soon.

 workshopOnLoad : function (me, parent, course) {
          var els ='';
          if (typeof(windowobj.frames[0]) != 'undefined') { //check that the frames are loaded - this can vary according to conditions
              if (windowobj.frames[0].location.href != amVariables.wwwroot+'/mod/workshop/assessments.php') {
              // this is the early stage, pop up has loaded and grading is occurring
                      // annoyingly, the workshop module has not named its submit button, so we have to get it using another method as the 11th input
                          els = windowobj.frames[0].document.getElementsByTagName('input');
                          if (els.length == 11) {
                                  els[10]["onclick"] = new Function("AJAXmarking.saveChangesAJAX('/mod/workshop/assessments.php', AJAXmarking.main, '"+me+"', true);"); // IE
                                  //els[10].setAttribute("onClick", "saveChangesAJAXFrames('"+me+"', '"+parent+"', '"+course+"')"); // Mozilla etc
                                  window.clearInterval(AJAXmarking.timerVar);	// cancel loop
                                 // AJAXmarking.timerVar=self.setInterval('AJAXmarking.afterLoad("/mod/workshop/assessments.php")', 500); // set loop for next function that will close pop up on location change
                          }
                  }
          }
  },

  /**
  * function to add onclick stuff to the forum ratings button. This button also has no name or id so we
  * identify it by getting the last tag in the array of inputs. The function is triggered on an interval
  * of 1/2 a second until it manages to close the pop up after it has gone to the confirmation page
  */

  forumOnLoad : function (me) {
      var els ='';
      var name = navigator.appName;
  // first, add the onclick if possible
      if (typeof(AJAXmarking.windowobj.document.getElementsByTagName('input')) != 'undefined') { // window is open with some input. could be loading lots though.
          els = AJAXmarking.windowobj.document.getElementsByTagName('input');

          if (els.length > 0) {
              var key = els.length -1;
              if (els[key].value == amVariables.forumSaveString) { // does the last input have the 'send in my ratings string as label, showing that all the rating are loaded?

                 // if (name != "Microsoft Internet Explorer") {
                 //     els[key].setAttribute("onClick", "return this.saveChangesAJAX('"+me+"')"); // mozilla and all other good browsers
                 // } else {
                     els[key]["onclick"] = new Function("return AJAXmarking.saveChangesAJAX('/mod/forum/rate.php', AJAXmarking.main, '"+me+"');"); // IE
                 // }
                  window.clearInterval(AJAXmarking.timerVar); // cancel loop for this function
                  //AJAXmarking.timerVar=self.setInterval('AJAXmarking.afterLoad("/mod/forum/rate.php")', 500); // set loop for next function that will close pop up on location change
              }
          }
      }
  },

  quizOnLoad : function (me) {
      var els = '';
      var lastButOne = '';
      t = t + 1; //what was this for?

      //alert('course= '+course);
      if (typeof(AJAXmarking.windowobj.document.getElementsByTagName('input')) != 'undefined') { // window is open with some input. could be loading lots though.
          els = AJAXmarking.windowobj.document.getElementsByTagName('input');

          if (els.length > 14) { // there is at least the DOM present for a single attempt, but if the student has made a couple of attempts,
                                  // there will be a larger window.
              lastButOne = els.length - 1;
              if (els[lastButOne].value == amVariables.quizSaveString) {

                  // the onclick carries out the functions that are already specified in lib.php, followed by the function to update the tree
                  var name = navigator.appName;
                  if (name == "Microsoft Internet Explorer") {
                  els[lastButOne]["onclick"] = new Function("AJAXmarking.saveChangesAJAX('/mod/quiz/report.php', AJAXmarking.main, '"+me+"'); "); // IE
                  } else {
                          els[lastButOne].setAttribute("onClick", "window.opener.AJAXmarking.saveChangesAJAX('/mod/quiz/report.php', AJAXmarking.main, '"+me+"')"); // Mozilla etc.
                  }
                  window.clearInterval(timerVar); // cancel the loop for this function
                  //setTimeout('AJAXmarking.afterLoad("/mod/quiz/report.php")', 500);
                  //alert('done');
              }
          }
      }
  },

journalOnLoad :   function (me) {
          var els ='';
  // first, add the onclick if possible
          if (typeof(AJAXmarking.windowobj.document.getElementsByTagName('input')) != 'undefined') { // window is open with some input. could be loading lots though.

                  els = AJAXmarking.windowobj.document.getElementsByTagName('input');

                  if (els.length > 0) {
                          var key = els.length -1;
                          //alert(els[key].value);
                          if (els[key].value == amVariables.journalSaveString) { // does the last input have the 'send in my ratings string as label, showing that all the rating are loaded?

                                  els[key].setAttribute("onClick", "return AJAXmarking.saveChangesAJAX('/mod/journal/report.php', AJAXmarking.main, '"+me+"')"); // mozilla and all other good browsers
                                  els[key]["onclick"] = new Function("return AJAXmarking.saveChangesAJAX('/mod/journal/report.php', AJAXmarking.main, '"+me+"');"); // IE
                                  //alert('forum alfter function');

                                  window.clearInterval(timerVar); // cancel loop for this function
                                  //setTimeout('AJAXmarking.afterLoad("/mod/journal/report.php")', 500); // set loop for next function that will close pop up on location change
                          }
                  }
          }
  },


  // function that waits till the pop up has a particular location and then shuts it.

  afterLoad : function (loc) { //may be possible to replace this loop with a dom event listener
        //  if (!AJAXmarking.windowobj.closed) {//prevents this loop from continuing indefinitely if the window is closed manually before grading

                 // window.clearInterval(AJAXmarking.timerVar);
         // }
          if (!AJAXmarking.windowobj.closed && AJAXmarking.windowobj.location.href == amVariables.wwwroot+loc) {
                  setTimeout(AJAXmarking.windowobj.close(), 1000);
                  //window.clearInterval(AJAXmarking.timerVar);
          } else if (AJAXmarking.windowobj.closed) {
              return;
          } else {
              setTimeout(AJAXmarking.afterLoad(loc), 500);
          }
  },


  /**
   *need to find the size of the window so the dark div is not too small
   *
   */

  alertSize : function () { //http://www.howtocreate.co.uk/tutorials/javascript/browserwindow
    var  myHeight = 0;
    if( typeof( window.innerWidth ) == 'number' ) {
      //Non-IE
      myHeight = window.innerHeight;
    } else if( document.documentElement && ( document.documentElement.clientWidth || document.documentElement.clientHeight ) ) {
      //IE 6+ in 'standards compliant mode'
      myHeight = document.documentElement.clientHeight;
    } else if( document.body && ( document.body.clientWidth || document.body.clientHeight ) ) {
      //IE 4 compatible
      myHeight = document.body.clientHeight;
    }
    return myHeight;
  },



   ie_width : function () {
      if (/MSIE (\d+\.\d+);/.test(navigator.userAgent)){
      //    alert ('width fix');
        var el = document.getElementById('treediv');

        var width = el.offsetWidth;
      //  set width of main content div to the same as treediv
        var contentDiv = el.parentNode;
        contentDiv.style.width = width;


      //  var mainDiv = contentDiv.parentNode;
        //var col = document.getElementById('right-column');
      //  var max = contentDiv.offsetWidth;
       // var currentDiff = width - 150;
       // col.style.width = colo.style.width + currentDiff;
        //alert('ie fixed');
      }
  },

  /**
   * Builds the greyed out panel for the config overlay
   */

  greyBuild : function() {

      if (!AJAXmarking.greyOut) {
           AJAXmarking.greyOut =
                new YAHOO.widget.Panel("greyOut",
                    { width:"480px",
                      height:"510px",
                      fixedcenter:true,
                      close:true,
                      draggable:false,
                      zindex:110,
                      modal:true,
                      visible:false,
                      iframe: true
                    }
                );
            AJAXmarking.greyOut.setHeader("header");

            var bodyText = "<div id='configStatus'></div><div id='configTree'></div><div id='configSettings'><div id='configInstructions'>instructions</div><div id='configCheckboxes'><form id='configshowform' name='configshowform'></form></div><div id='configGroups'></div></div>";
            AJAXmarking.greyOut.setBody(bodyText);
            document.body.className += ' yui-skin-sam';

            AJAXmarking.greyOut.beforeHideEvent.subscribe(function() {
                 AJAXmarking.refreshTree(AJAXmarking.main);
              });
            //var div = document.getElementById('panel');
            AJAXmarking.greyOut.render(document.body);

            AJAXmarking.greyOut.show()

            AJAXmarking.config = new AJAXmarking.AJAXtree('configTree', 'configIcon', 'configStatus', true);
            AJAXmarking.ajaxBuild(AJAXmarking.config);
            AJAXmarking.config.icon = document.getElementById('configIcon'); //wasted?

        } else {

          AJAXmarking.greyOut.show();
          AJAXmarking.clearGroupConfig();
          AJAXmarking.refreshTree(AJAXmarking.config);
        }
   },


  


  /**
   * the onclick for the radio buttons in the config screen.
   * if show by group is clicked, the groups thing pops up. If another one is, the groups thing is hidden.
   */

  showHideChanges : function(checkbox) {
          // if its groups, show the groups by getting them from the course node?
          //alert('showhide fired');
          var showHide = '';

          //empty the groups area
          var groupDiv = document.getElementById('configGroups');
          while (groupDiv.firstChild) {
              groupDiv.removeChild(groupDiv.firstChild);
          }
         // var children = groupDiv.childNodes.length;
         // for (a=0;a<children;a++) {
         //     groupDiv.removeChild(groupDiv.childNodes[a]);
         // }

          switch (checkbox.value) {
                  case 'groups': //need to set the type of this assessment to 'show groups' and get the groups stuff.
                          //alert('groups');
                          showHide = 2;
                          //get the form div to be able to read the values
                          var form = document.getElementById('configshowform');

                          //config.icon.innerHTML = img;
                          /*
                          //check to see if the course node has alredy got the groups info attached
                          var node = config.tree.getNodeByProperty("assid", form.);
                          if (typeof(node.data.groups = 'undefined')) { // no group data available, so get it via ajax and store it as part of the course node
                          */

                         // silly IE6 bug fix
                         for (c=0;c<form.childNodes.length;c++) {
                             switch (form.childNodes[c].name) {
                                 case 'course':
                                     var course = form.childNodes[c].value;
                                     break;
                                 case 'assessmenttype':
                                     var assessmentType = form.childNodes[c].value;
                                     break;
                                 case 'assessment':
                                     var assessment = form.childNodes[c].value;
                                     break;
                              }
                          }
                          var url = amVariables.wwwroot+'/blocks/ajax_marking/ajax.php?id='+course+'&assessmenttype='+assessmentType+'&assessmentid='+assessment+'&type=config_groups&userid='+amVariables.userid+'&showhide='+showHide+'';
                          var request = YAHOO.util.Connect.asyncRequest('GET', url, AMajaxCallback);
                          break;
                  case 'show':
                          //document.getElementById('configGroups').innerHTML = '';
                          AJAXmarking.configSet(1);
                          break;
                  case 'hide':
                          //document.getElementById('configGroups').innerHTML = '';
                          AJAXmarking.configSet(3);
                          break;

          } // end switch
          AJAXmarking.disableRadio();

  },



  // called from the above function to set the showhide value of the config items
  configSet : function (showHide) {
          var form = document.getElementById('configshowform');
          //alert(form.id);
          var len = form.childNodes.length;
          //alert(document.location);
         // silly hack to fix the way IE6 will not retrieve data from an input added using appendChild using form.assessment.value
          for(b=0; b<len; b++) {

              switch (form.childNodes[b].name) {
                  case 'assessment':
                      var assessmentValue = form.childNodes[b].value;
                      break;
                  case 'assessmenttype':
                      var assessmentType = form.childNodes[b].value;
                      break;

              }
          }
          var url = amVariables.wwwroot+'/blocks/ajax_marking/ajax.php?id='+assessmentValue+'&type=config_set&userid='+amVariables.userid+'&assessmenttype='+assessmentType+'&assessmentid='+assessmentValue+'&showhide='+showHide+'';
          //alert(url);
          var request = YAHOO.util.Connect.asyncRequest('GET', url, AMajaxCallback);
  },

  clearGroupConfig : function() {
       var check = document.getElementById('configshowform');
          // remove all nodes
          //var len = check.childNodes.length;
          while (check.hasChildNodes()) {
            check.removeChild(check.firstChild);
          }

          // clear out previous groups data from display div
          var groups = document.getElementById('configGroups');
          //var glen = groups.childNodes.length;
          while (groups.hasChildNodes()) {
            groups.removeChild(groups.firstChild);
          }
  }


} // end main class

  /**
   * Callback object for the AJAX call, which
   * fires the correct function.
   */
        var  AMajaxCallback =
          {
            cache    : false,
            success  : AJAXmarking.AJAXsuccess,
            failure  : AJAXmarking.AJAXfailure,
            argument : 1200
            //scope    : this
          };


function init() {
   
    if ( document.location.toString().indexOf( 'https://' ) != -1 ) {
        amVariables.wwwroot = amVariables.wwwroot.replace('http:', 'https:');
    }
    AJAXmarking.main = new AJAXmarking.AJAXtree('treediv', 'mainIcon', 'status');
    AJAXmarking.ajaxBuild(AJAXmarking.main);
    
}
// this stuff needs to stay at the end. used to be in the main php file with a defer thing but I think it broke the xhtml stuff
init();
	

