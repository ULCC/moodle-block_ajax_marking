// JavaScript Document for including in the AJAX marking block

var div ='';                      // this holds the status div so that the total count message can be put there
//var nodesArray = '';              // this is what holds the data that comes back from the ajax calls
var aidHolder = '';               // this holds the assessment id so it can be accessed by other functions
var sidHolder = '';               // this holds the submission id so it can be accessed by other functions.
                                  // the above 2 variables sometimes hold different things e.g. user id or submission 
								  // record id, depending on what sort of node it is
var nodeHolder = '';              // this holds the parent node so it can be referenced by other functions
var compHolder = '';              // this holds the callback function of the parent node so it can be called once all the child nodes have been built
var root = '';                    // holds the root node of the tree so it can be refreshed and have children added
var tree = '';                    // the entire tree as a variable
var href = '';                    // holds the link for the onclick - not used any more??
var totalCount = 0;               // all pieces of work to be marked. Updated dynamically by altering this.             
var valueDiv = '';                // the div that hold totalCount
var wwwroot = '';                 // These are variables that hold the language strings generated by php at the start
var theme = '';
var userid = '';
var forumString = '';             
var assignmentString = '';
var workshopString = '';
var assignmentWorkString = '';
var workshopWorkString = '';
var totalMessage = '';
var collapseString = '';
var nothingString = '';
var quizSaveString = '';
var windowobj = '';                // this is the variable used by the openPopup function on the front page. We make it a global 
                                   // so we can access the pop up window using DOM later
var timerVar = '';                 // this holds the timer that keeps trying to add the onclick stuff to the pop ups as the pop up loads
var frameTimerVar = '';            // same but for closing the frames for a workshop
var t = 0;
var loadCounter = 0;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// this function gets all the variables that have been put into hidden inputs in the block by PHP and makes them into javascript vars ready to be used
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

function getVars() {
	 div = document.getElementById('status');
   	 wwwroot = document.getElementById('wwwrootvalue').value;
	 // sort out the https in case it is present
	 if (window.location.href.match(/https:/)) {
		wwwroot = wwwroot.replace(/http:/, "https:");
	}
 	 theme = document.getElementById('themevalue').value;
 	 userid = document.getElementById('useridvalue').value;
 	 forumString = document.getElementById('forum_string').value;
	 assignmentString = document.getElementById('assignment_string').value;
	 workshopString = document.getElementById('workshop_string').value;
	 assignmentWorkString = document.getElementById('assignment_work_string').value;
	 workshopWorkString = document.getElementById('workshop_work_string').value;
     totalMessage = document.getElementById('total_string').value+': &nbsp;';
	 collapseString = document.getElementById('collapse_string').value;
	 nothingString = document.getElementById('nothing_string').value;
	 forumSaveString = document.getElementById('forumsavestring').value;
	 quizString = document.getElementById('quizstring').value;
	quizSaveString = document.getElementById('quizsavestring').value;
	journalString = document.getElementById('journalstring').value;
	journalSaveString = document.getElementById('journalsavestring').value;
}


////////////////////////////////////////////////////////////////////
// Function to initialise the tree object and call the ajax bits
////////////////////////////////////////////////////////////////////

function treeBuild() {	
  
    tree = '';
	root = '';
	tree = new YAHOO.widget.TreeView('treediv'); 
/// the following will not work until YUI is updated, but when it does, it will preload all the icons.
///	tree.preload();

	
/// set the removal of all child nodes each time a node is collapsed (forces refresh)
	tree.subscribe('collapseComplete', function(node) { 
		tree.removeChildren(node); 
	});
/*
/// set it so that the node data will pop-up when it is clicked	
	tree.subscribe('onmouseover', function(node) { 
        alert(node.data.summary);
	});
*/
	root = tree.getRoot();
	ajaxBuild();
}


/////////////////////////////////////////////////////////////////////////
// Function to make the initial nodes (courses) when the page first loads
// and when the tree is refeshed
/////////////////////////////////////////////////////////////////////////

function ajaxBuild() {
	
	if (loadCounter == 0) {
		var img = '<img id="loader" src="'+wwwroot+'/lib/yui/treeview/assets/loading.gif" alt=\"loading\" />';
		document.getElementById('icon').innerHTML = img;
		var sUrl = wwwroot+'/blocks/ajax_marking/ajax.php?id='+userid+'&type=courses&userid='+userid+'';
	
		var request = YAHOO.util.Connect.asyncRequest('GET', sUrl, ajaxCallback); 
		loadCounter = 1;
	}
}

///////////////////////////////////////////////////////////////////////////////////
// Callback functions for the  AJAX call, which checks what kind of data is coming back
// and fires the correct function.
///////////////////////////////////////////////////////////////////////////////////

var ajaxCallback = {

	success: function (o) {
		
		var type = '';
		var responseArray = '';
		
		responseArray = eval(o.responseText);
		type = responseArray[0].type; // fist object holds data about what kind of nodes we have so we can fire the right function.
		responseArray.shift(); // remove the data object, leaving just the node objects
		
		switch (type) {
			
		case 'courses':		
			makeCourseNodes(responseArray);
			break;
		
		case 'assessments':
			makeAssessmentNodes(responseArray);
			break;
			
		case 'groups':
			makeGroupNodes(responseArray);
			break;
			
		case 'submissions':
			makeSubmissionNodes(responseArray);
			break;
		}
	
	},
	
	failure: function (o) 
	{
		if (o.tId == -1) {
			div.innerHTML =  '<br />AJAX connection timed out.<br/>Click "collapse and refresh" to retry';
			//div.innerHTML += 'Transaction id:' + o.tId + '<br/>'; 
			//div.innerHTML += 'HTTP status:' + o.status + '<br/>'; 
			//div.innerHTML += 'Status code message:' + o.statusText + '<br/>';
		}
		if (o.tId == 0) {
		div.innerHTML = '<br />AJAX connection failed.<br />Check your connection and click<br />"collapse and refresh" to retry';
		}
	},
	
timeout: 12000

};


///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// This is the callback for the loadAssessmentNodeData function and will add any data to the tree, before 
/// re-drawing it. This is called when a course node is clicked.
///////////////////////////////////////////////////////////////////////////////////////////////////////////

/*
var assessmentCallback = {

	success: function (o) {
		
		makeAssessmentNodes(o);
		
	},
	
	failure: function (o) {
		div.innerHTML =  '<br />AJAX Error - check your connection <br/>';
		div.innerHTML += 'Transaction id:' + o.tId + '<br/>'; 
		div.innerHTML += 'HTTP status:' + o.status + '<br/>'; 
		div.innerHTML += 'Status code message:' + o.statusText + '<br/>';
	},
	timeout: 7000
};
*/

function makeCourseNodes(nodesArray) {
	
	var nodesLeng = '';
	
	// uncomment for verbatim on screen output of the AJAX response for assessment and submission nodes
	//div.innerHTML += o.responseText;
	
/// make the array of nodes
	nodesLeng = nodesArray.length;
	
	if (nodesLeng === 0) { // the array is empty, so say there is nothing to mark
		div.innerHTML = nothingString;
		document.getElementById('icon').innerHTML = '';
	}
	else { // there is a tree to be drawn
	
/// cycle through the array and make the nodes
		var i = 0;
		for (n=0;n<nodesLeng;n++) {
			var label = nodesArray[n].name+' ('+nodesArray[n].count+')';
			var myobj = { label: ''+label+'', id:''+nodesArray[n].id+'', 
						  type:''+nodesArray[n].type+'', count:''+nodesArray[n].count+'', 
						  cid:''+nodesArray[n].cid+'', name:''+nodesArray[n].name+'', 
						  summary:''+nodesArray[n].summary+''};
	
			var tmpNode1 = new YAHOO.widget.TextNode(myobj, root, false);
			tmpNode1.labelStyle = 'icon-course';
			tmpNode1.setDynamicLoad(loadNodeData);
		}
		
/// now make the tree, add the total at the top and remove the loading icon
		tree.draw();
		document.getElementById('totalmessage').innerHTML = totalMessage;
		updateTotal();
		document.getElementById('icon').innerHTML = '';
		document.getElementById('tree_control').innerHTML = '<a href=\"#\" onclick=\"refresh();return false\">'+collapseString+'</a>';
		
/// add tooltips if that option has been specified in config
		// if (courseTooltips == 1) { 
		//	 tooltips();
		// }
		
	}
}




///////////////////////////////////////////////////////
// new function to make an assessment node
////////////////////////////////////////////////////////

function makeAssessmentNodes(nodesArray) {
    // uncomment for verbatim on screen output of the AJAX response for assessment and submission nodes
    // div.innerHTML += o.responseText;
	// alternatively, use the firebug extension for mozilla firefox - less messy.


 		var myobj = '';
		var aidHolder = '';
		var sidHolder = '';
		var remId = '';
		var tmpNode2 = '';
		var tmpNode3 = '';
		var clickNode = '';
		var nodesLeng = '';
		
			
/// First the courses array
		
		nodesLeng = nodesArray.length;
	
			
/// cycle through the array and make the nodes

		for (m=0;m<nodesLeng;m++) {
			
//////////////////////////////////
/// its a node for an assessment
//////////////////////////////////
			
/// set the correct language strings for the tooltip summaries

			switch (nodesArray[m].type) {
				
			case 'assignment_submissions':
				nodesArray[m].summary = '<strong>'+assignmentString+':</strong> '+nodesArray[m].summary+'';
				break;
			case 'workshop_submissions':
				nodesArray[m].summary = '<strong>'+workshopString+':</strong> '+nodesArray[m].summary+'';
				break;
			case 'forum_submissions':
				nodesArray[m].summary = '<strong>'+forumString+':</strong> '+nodesArray[m].summary+'';
				break;
			case 'quiz_questions':
				nodesArray[m].summary = '<strong>'+quizString+':</strong> '+nodesArray[m].summary+'';
				break;
			case 'journal_submissions':
				nodesArray[m].summary = '<strong>'+journalString+':</strong> '+nodesArray[m].summary+'';
				break;
			}
			
/// make the label from the name and count
			var label = nodesArray[m].name+' ('+nodesArray[m].count+')';
			var remId = nodesArray[m].type+nodesArray[m].id + 'sid' + nodesArray[m].assid + '';
			
/// put it all together into an object
		    myobj = { label:''+label+'', id:''+nodesArray[m].id+'', type:''+nodesArray[m].type+'',
			           assid:''+nodesArray[m].assid+'', count:''+nodesArray[m].count+'', name:''+nodesArray[m].name+'',
					   summary:''+nodesArray[m].summary+''};
					   
// , href:'javascript:null(0)'
			 
/// use the object to create a new node
			tmpNode2 = new YAHOO.widget.TextNode(myobj, nodeHolder, false);
			
/// style the node acording to its type
			switch (nodesArray[m].type) {
				
			case 'assignment_submissions': 
				tmpNode2.labelStyle = 'icon-assign';
				break;	
			case 'workshop_submissions':
				tmpNode2.labelStyle = 'icon-workshop';
				break;
			case 'forum_submissions':
				tmpNode2.labelStyle = 'icon-forum';
				break;
			case 'quiz_submissions':
				tmpNode2.labelStyle = 'icon-question';
				break;
			case 'quiz_questions':
				tmpNode2.labelStyle = 'icon-quiz';
				break;
			case 'journal_submissions':
				tmpNode2.labelStyle = 'icon-journal';
				break;
			}
			
/// Journals are a special case as they need no children (all students appear on one page), so we make them clickable
		   
           if (nodesArray[m].type == 'journal_submissions') {
			   
			    clickNode = tree.getNodeByProperty('assid', nodesArray[m].assid);
				
				clickNode.onLabelClick = function(me) {
					openpopup('/mod/journal/report.php?id='+me.data.id+'', 
					remId, 'menubar=0,location=0,scrollbars,resizable,width=780,height=500', 0);
					timerVar=window.setInterval('journalOnload(\''+me.data.assid+'\', \''+me.parent.data.cid+'\')', 500);
					return false;
				};
			} else {
			
/// set the node to load data dynamically 
			tmpNode2.setDynamicLoad(loadNodeData);

			}
/// now, we need to update the parent node's label, in case the count of assessments/submissions
/// has changed since the node was created
	
			parentUpdate(nodeHolder);
		}
	
/// finally, run the function that updates the original node and adds the children
		
		compHolder();
		
		updateTotal();
		
/// then add tooltips.	

	    tooltips();	

}


function makeSubmissionNodes(nodesArray) {
		  
///////////////////////////////////////////			
/// we have a final node i.e. a submission 
//////////////////////////////////////////////
		
		var myobj = '';
		var aidHolder = '';
		var sidHolder = '';
		var remId = '';
		var tmpNode2 = '';
		var tmpNode3 = '';
		var clickNode = '';
		var nodesLeng = '';
		var typeHolder = '';
			
/// First the courses array
		nodesLeng = nodesArray.length;
		
		for (k=0;k<nodesLeng;k++) {
			
	/// set up a unique id so the node can be removed when needed
	
			aidHolder = nodesArray[k].aid;
			sidHolder = nodesArray[k].sid;
			typeHolder = nodesArray[k].type;
			remId = typeHolder+aidHolder + 'sid' + sidHolder + '';
			
	/// set up time-submitted thing for tooltip. This is set to make the time match the browser's local timezone, 
	/// but I can't find a way to use the user's specified timezone from \$USER. Not sure if this really matters.
	
			var secs = parseInt(nodesArray[k].seconds);
			var time = parseInt(nodesArray[k].time)*1000; // javascript likes to work in miliseconds, whereas moodle uses unix format (whole seconds)
			var d = new Date(); // make a new data object
			d.setTime(time);  // set it to the time we just got above
			
			var nodeCount = 0;
			if (typeof(nodesArray[k].count) != 'undefined') { // Allows us to add a count for keeping track of forum submission accurately.                
				nodeCount = nodesArray[k].count;              // The other types don't need this.
			}
			
	/// build the node as before
	
			myobj = { label:''+nodesArray[k].name+'', id:''+remId+'', type:''+nodesArray[k].type+'',
				   aid:''+nodesArray[k].aid+'', sid:''+nodesArray[k].sid+'', summary:''+nodesArray[k].summary+'', 
				   count:''+nodeCount+''} ;
			tmpNode3 = new YAHOO.widget.TextNode(myobj, nodeHolder, false);	
	
	/// apply a style according to how long since it was submitted
					
			if (secs < 21600) { // less than 6 hours
				tmpNode3.labelStyle = 'icon-user-one';
			} else if (secs < 43200) { // less than 12 hours
				tmpNode3.labelStyle = 'icon-user-two';
			} else if (secs < 86400) { // less than 24 hours
				tmpNode3.labelStyle = 'icon-user-three';
			} else if (secs < 172800) { // less than 48 hours
				tmpNode3.labelStyle = 'icon-user-four';
			} else if (secs < 432000) { // less than 5 days
				tmpNode3.labelStyle = 'icon-user-five';
			} else if (secs < 864000) { // less than 10 days
				tmpNode3.labelStyle = 'icon-user-six';
			} else if (secs < 1209600) { // less than 2 weeks
				tmpNode3.labelStyle = 'icon-user-seven';
			} else { // more than 2 weeks
				tmpNode3.labelStyle = 'icon-user-eight';
			}
			
	/// set the onclick to open the submission pop-up. n.b. - this doesn't work if you try to assign a different function to 
	/// each node as you iterate through the loop. It needs to get the data from itself each time like this. Using remId to make each pop-up unique.
				   
			clickNode = tree.getNodeByProperty('id', remId);
			// add switch here
			if (nodeHolder.data.type == 'quiz_submissions') {
			   clickNode.onLabelClick = function(me) {
					openpopup('/mod/quiz/report.php?mode=grading&action=grade&q='+me.parent.parent.data.id+'&questionid='+me.data.aid+'&userid='+me.data.sid+'', 
					remId, 'menubar=0,location=0,scrollbars,resizable,width=780,height=500', 0);
					timerVar=window.setInterval('quizOnload(\''+me.data.id+'\', \''+me.parent.data.assid+'\',  \''+me.parent.parent.data.assid+'\', \''+me.parent.parent.parent.data.cid+'\')', 500);
					return false;
				};
			}
			else {
				if (nodeHolder.data.type == 'assignment_submissions') {
					
					// set the offset - hacky, but better than nothing
					clickNode.onLabelClick = function(me) {
						openpopup('/mod/assignment/submissions.php?id='+me.data.aid+'&userid='
						+me.data.sid+'&mode=single&offset=0', 
						'gradePopUp', 'menubar=0,location=0,scrollbars,resizable,width=780,height=500', 0);
						// now the pop up is opening, set the function going that will add the onclick events. It will cancel the loop on completion
						timerVar=window.setInterval('assignmentOnload(\''+me.data.id+'\', \''+me.parent.data.assid+'\', \''+me.parent.parent.data.cid+'\')', 500);
						return false;
					};
					
				}
				else if (nodeHolder.data.type == 'workshop_submissions') {
					clickNode.onLabelClick = function(me) {
						openpopup('/mod/workshop/assess.php?id='+me.data.aid+'&sid='+me.data.sid+'&redirect='+wwwroot+'', 
						remId, 'menubar=0,location=0,scrollbars,resizable,width=780,height=500', 0);
						// now the pop up is opening, set the function going that will add the onclick events. It will cancel the loop on completion
						timerVar=window.setInterval('workshopOnload(\''+me.data.id+'\', \''+me.parent.data.assid+'\', \''+me.parent.parent.data.cid+'\')', 500);
						return false;
					};
				}
				else if (nodeHolder.data.type == 'forum_submissions') {
					clickNode.onLabelClick = function(me) {
						openpopup('/mod/forum/discuss.php?d='+me.data.aid+'#p'+me.data.sid+'', 
						remId, 'menubar=0,location=0,scrollbars,resizable,width=780,height=500', 0);
						timerVar=window.setInterval('forumOnload(\''+me.data.id+'\', \''+me.parent.data.assid+'\', \''+me.parent.parent.data.cid+'\')', 500);
						return false;
					};
				}
	/*			else if (nodeHolder.data.type == 'quiz_submissions') {
				   clickNode.onLabelClick = function(me) {
						openpopup('/mod/quiz/report.php?mode=grading&action=grade&q='+me.parent.parent.data.id+'&questionid='+me.data.aid+'&userid='+me.data.sid+'', 
						remId, 'menubar=0,location=0,scrollbars,resizable,width=780,height=500', 0);
						timerVar=window.setInterval('quizOnload(\''+me.data.id+'\', \''+me.parent.data.assid+'\',  \''+me.parent.parent.data.assid+'\', \''+me.parent.parent.parent.data.cid+'\')', 500);
						return false;
					};
				} */
			}
		} // end for i
		parentUpdate(nodeHolder);
		parentUpdate(nodeHolder.parent);
		// quiz has 4 levels, so extra update of counts is needed
		if (nodeHolder.data.type == 'quiz_submissions') {
			parentUpdate(nodeHolder.parent.parent); 
		}
/// finally, run the function that updates the original node and adds the children

		compHolder(); 
		updateTotal();
		
/// then add tooltips.	

	    tooltips();	

}

///////////////////////////////////////////////////////////////////////////////////
/// This callback come from loadSubmissionNodeData (clicking on an assessment node)
///////////////////////////////////////////////////////////////////////////////////
/*
var submissionCallback = {
	
	success: function (o) {
		
		makeSubmissionNodes(o);

	},
	
	failure: function (o) {
		
		div.innerHTML =  '<br />AJAX Error - check your connection <br/>';
		div.innerHTML += 'Transaction id:' + o.tId + '<br/>'; 
		div.innerHTML += 'HTTP status:' + o.status + '<br/>'; 
		div.innerHTML += 'Status code message:' + o.statusText + '<br/>';
	},
	timeout: 7000
};
*/
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// this function is triggered when a dynamic load label is clicked. it places the node and its callback function
/// into globals ready to be used after the ajax has finished and fires the ajax request
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/*
function loadAssessmentNodeData(node, onCompleteCallback) { 
/// store details of the node that has been clicked in globals for reference by later callback function 
	nodeHolder = node;
	compHolder = onCompleteCallback;
	
/// request data using AJAX 

	var sUrl = wwwroot+'/blocks/ajax_marking/ajax.php?id='+node.data.id+'&type='+node.data.type+'&userid='+userid+'';

	var request = YAHOO.util.Connect.asyncRequest('GET', sUrl, assessmentCallback); 
} 

*/

function loadNodeData(node, onCompleteCallback) { 
/// store details of the node that has been clicked in globals for reference by later callback function 
	nodeHolder = node;
	compHolder = onCompleteCallback;
	var quizid = 0;
	if (node.data.type == 'quiz_submissions') {// need to send this only for the quiz questions as the db query needs this extra parameter
		quizid = node.parent.data.id;
		//alert(quizid);
	} 
	
/// request data using AJAX 
	var sUrl = wwwroot+'/blocks/ajax_marking/ajax.php?id='+node.data.id+'&type='+node.data.type+'&userid='+userid+'&quizid='+quizid+'';

	var request = YAHOO.util.Connect.asyncRequest('GET', sUrl, ajaxCallback); 
}

///////////////////////////////////////////////////////////////////////////////////////
// function to create tooltips. When root.refresh() is called it somehow wipes 
// out all the tooltips, so it is necessary to rebuild them
// each time part of the tree is collapsed or expanded
// tooltips for the courses are a bit pointless, so its just the assignments and submissions
///////////////////////////////////////////////////////////////////////////////////////

// n.b. the width of the tooltips is fixed because not specifying it makes them go narrow in IE6. making them 100% works fine in IE6 but makes FF 
// stretch them across the whole page. 200px is a guess as to a good width for a 1024x768 screen based on the width of the block. Change it in both places below
// if you don't like it

// IE problem - the tooltips appear to interfere with the submission nodes using ie, so that they are not always clickable, but only when the user 
// clicks the node text rather than the expand (+) icon. Its not related to the timings as using setTimeout to delay the generation of the tooltips 
// makes no difference 



/////////////////////////////////////////////////////////////////
// Refresh tree function - for Collapse &amp; refresh link
/////////////////////////////////////////////////////////////////

function refresh() {
   // div.innerHTML = '';
    tree.removeChildren(root);
	div.innerHTML = '';
	ajaxBuild();
}

////////////////////////////////////////////////////////////////////////////////////////////////
// function to alter a node's label with a new count once the children are removed or reloaded
////////////////////////////////////////////////////////////////////////////////////////////////

function countAlter(newNode, newCount) {
    var name = newNode.data.name;
    var newLabel = name+' ('+newCount+')';
	newNode.data.count = newCount;
	newNode.label = newLabel;
}


/////////////////////////////////////////////////////////////////////////////////////////////////////////
// function to update the parent assessment node when it is refreshed dynamically so that 
// if more work has been found, or a piece has now been marked, the count for that label will be accurate
/////////////////////////////////////////////////////////////////////////////////////////////////////////


function parentUpdate(node) {
	var counter = node.children.length;
    //alert(counter);
	//alert('assid: '+node.data.assid);
	if (counter === 0) {
		tree.removeNode(node, true);
	} else {
	    if (node.data.type == 'assessments' || node.data.type == 'forum_submissions' || node.data.type == 'quiz_questions') { // we need to sum child counts
		  
		    var tempCount = 0;
	        var tempStr = '';
		    for (i=0;i<counter;i++) {
				
			    tempStr = node.children[i].data.count;
				tempCount += parseInt(tempStr);
			}
			countAlter(node, tempCount);
		} else { // its an assessment node, so we count the children
	        countAlter(node, counter);
		}
		root.refresh();
	}
}

//////////////////////////////////////////////////////////////////////////////////
// function to update the total marking count by a specified number and display it
//////////////////////////////////////////////////////////////////////////////////

function updateTotal() {
    var count = 0;
	var countTemp = 0;
	childrenLength = root.children.length;
	for (i=0;i<childrenLength;i++) {
	    countTemp = root.children[i].data.count;
	    count = count + parseInt(countTemp);
	}
	if (count > 0) {
		document.getElementById('count').innerHTML = '<strong>'+count+'</strong>';
	}
}


function tooltips() {
	var name = navigator.appName;
	if (name != "Microsoft Internet Explorer") { 
	// this is disabled for IE because, although useful, in IE6 (assuming others too) the tooltips seem to sometimes remain as an invisible div on top 
	// of the tree structure once nodes has expanded, so that some of the child nodes are unclickable. Firefox is ok with it. This is a pain
	// because a person may not remember the full details of the assignment that was set and a tooltip is better than leaving the front page.	
	// I will re-enable it once I find a fix

		var i = 0;
		var j = 0;
		var k = 0;
		var tmpId = '';
		var tmpId1 = '';
		var tmpId2 = '';
		var tmpText1 = '';
		var tmpText2 ='';
		var control = document.getElementById('tree_control');
	
	/// 1. all courses loop
		var courseLength = root.children.length;
		for (i=0;i<courseLength;i++) {
		
	/// tooltips for courses may be overkill and get in the way of the tree. uncomment the following to turn them on
		//	var tmpId0 = root.children[i].getLabelEl();
		//	var tmpText0 = root.children[i].data.summary;
		//	temp_tt2 = new YAHOO.widget.Tooltip('temp_tt2', { context:tmpId0, text:tmpText0, showdelay:0, hidedelay:0, container:control} );
			
	/// 2. all children, if any, of these courses
	
			var workLength = root.children[i].children.length;
			for (j=0;j<workLength;j++) {
				
		
				
			// make the tooltip for this piece of work before sorting out its children
				tmpId1 = root.children[i].children[j].getLabelEl();
				tmpText1 = root.children[i].children[j].data.summary;
				temp_tt3 = new YAHOO.widget.Tooltip('temp_tt3', { context:tmpId1, text:tmpText1, showdelay:0, hidedelay:0, container:control} );
	
	/// 3.	all submissions, if any, of these children			
				var subLength = root.children[i].children[j].children.length;
				for (k=0;k<subLength;k++) {
				/// make the tooltip
					tmpId2 = root.children[i].children[j].children[k].getLabelEl();
					tmpText2 = root.children[i].children[j].children[k].data.summary;
					temp_tt4 = new YAHOO.widget.Tooltip('temp_tt4', { context:tmpId2, text:tmpText2, showdelay:0, hidedelay:0, container:control} );
				}	 
			}
		}
	}
} 

/////////////////////////////////////////////////////////////////////
/// These functions are called from the marking pop-ups.
//////////////////////////////////////////////////////////////////////

/// this function holds the original javascript from the save changes onclick for the Assignment pop up
function saveChangesAssignment() {
   document.getElementById('submitform').menuindex.value = document.getElementById('submitform').grade.selectedIndex;
   saveChangesAJAX();
}


function saveChangesAJAXjournal(thisNodeId, parentNodeId) {

/// remove the node that was just marked	 
	 var checkNode = "";
	 checkNode = tree.getNodeByProperty("assid", thisNodeId);
	 tree.removeNode(checkNode, true);

/// get the parent node and alter its label count to have one less in the total count. Remove the node if the count is 0	
	 var parentNode = "";
	 parentNode = tree.getNodeByProperty("cid", parentNodeId);
	 parentUpdate(parentNode);


/// refresh the tree to redraw the nodes with the new labels
	 refreshRoot();
	 updateTotal();
	 tooltips();
}


/// this function updates the tree to remove the node of the pop up that has just been marked, then it updates the parent nodes and refreshes the tree	
function saveChangesAJAX(thisNodeId, parentNodeId, courseNodeId) {

/// remove the node that was just marked	 
	 var checkNode = "";
	 checkNode = tree.getNodeByProperty("id", thisNodeId);
	 tree.removeNode(checkNode, true);

/// get the parent node and alter its label count to have one less in the total count. Remove the node if the count is 0	
	 var parentNode = "";
	 parentNode = tree.getNodeByProperty("assid", parentNodeId);
	 parentUpdate(parentNode);

/// now do the same for the course node		
	if (typeof(courseNodeId) != "undefined") { //journal doesn't need this
		//alert('coursenode thing fired');
		 var courseNode = "";
		 courseNode = tree.getNodeByProperty("cid", courseNodeId);
		 parentUpdate(courseNode);
	}

/// refresh the tree to redraw the nodes with the new labels
	 refreshRoot();
	 updateTotal();
	 tooltips();
}

/// this function updates the tree to remove the node of the pop up that has just been marked, then it updates the parent nodes and refreshes the tree	
function saveChangesAJAXquiz(thisNodeId, parentNodeId, quizNodeId, courseNodeId) {

//alert ('save ajax quiz fired');
/// remove the node that was just marked	 
	 var checkNode = "";
	 checkNode = tree.getNodeByProperty("id", thisNodeId);
	 tree.removeNode(checkNode, true);

/// get the parent node and alter its label count to have one less in the total count. Remove the node if the count is 0	
	 var parentNode = "";
	 parentNode = tree.getNodeByProperty("assid", parentNodeId);
	 parentUpdate(parentNode);

/// get the parent node and alter its label count to have one less in the total count. Remove the node if the count is 0	
	 var quizNode = "";
	 parentNode = tree.getNodeByProperty("assid", quizNodeId);
	 parentUpdate(parentNode);

/// now do the same for the course node		
   //  alert('id= '+courseNodeId);
	 var courseNode = "";
	 courseNode = tree.getNodeByProperty("cid", courseNodeId);
	 parentUpdate(courseNode);

/// refresh the tree to redraw the nodes with the new labels
	 refreshRoot();
	 updateTotal();
	 tooltips();
}

////////////////////////////////////////////////////////////////////////////////////////
// same as the above function, but adjusted to work when called from the workshop frames
////////////////////////////////////////////////////////////////////////////////////////

function saveChangesAJAXFrames(thisNodeId, parentNodeId, courseNodeId) {

/// remove the node that was just marked	 
	 var checkNode = "";
	 checkNode = tree.getNodeByProperty("id", thisNodeId);
	 tree.removeNode(checkNode, true);

/// get the parent node and alter its label count to have one less in the total count. Remove the node if the count is 0	
	 var parentNode = "";
	 parentNode = tree.getNodeByProperty("assid", parentNodeId);
	 parentUpdate(parentNode);

/// now do the same for the course node		
	
	 var courseNode = "";
	 courseNode = tree.getNodeByProperty("cid", courseNodeId);
	 parentUpdate(courseNode);
	

/// refresh the tree to redraw the nodes with the new labels
	 refreshRootFrames();
	 updateTotal();
	 tooltips();
 }


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// funtion to refresh all the nodes once the update operations have all been carried out by saveChangesAJAX()
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
function refreshRoot() {
	root.refresh();
	if (root.children.length === 0) {
	    document.getElementById("totalmessage").innerHTML = '';
		document.getElementById("count").innerHTML = '';
		div.innerHTML += nothingString;
	}
}



////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// funtion to refresh all the nodes once the operations have all been carried out - workshop frames version
////////////////////////////////////////////////////////////////////////////////////////////////////////////

function refreshRootFrames() {
	 root.refresh();
	 if (root.children.length === 0) {
		 document.getElementById("totalmessage").innerHTML = '';
		 document.getElementById("count").innerHTML = '';
		 div.innerHTML += nothingString;
	}
}





//////////////////////////////////////////////////////////////////////////////////////
// this function is called every 100 milliseconds once the assignment pop up is called 
// and tries to add the onclick handlers until it is successful. There are a few extra 
// checks in the following functions that appear to be redundant but which are 
// necessary to avoid errors.
//////////////////////////////////////////////////////////////////////////////////////

// NOTE: the offset system for saveandnext depends on the sort state having been stored in the $SESSION variable when the grading screen was accessed
// (which may not have happened, as we are not coming from the submissions.phpgrading screen or may have been a while ago). 
// The sort reflects the last sort mode the user asked for when ordering the list of pop-ups, e.g. by clicking on the firstname column header.
// I have not yet found a way to alter this variable using javascript - ideally, the sort would be the same as it is in the list presented in the marking block.
// until a work around is found, the save and next function is be a bit wonky, sometimes showing next when there is only one submission, so I have hidden it.

function assignmentOnload(me, parent, course) {
	var els ='';
	var els2 = '';
	var els3 = '';
	t = t + 1;
	if (typeof(windowobj.document.getElementsByName('submit')) != 'undefined') {
		els = windowobj.document.getElementsByName('submit');
		if (els.length !== 0) { // the above line will not return anything until the pop up is fully loaded
			// the onclick carries out the functions that are already specified in lib.php, followed by the function to update the tree
			var name = navigator.appName;
	        if (name == "Microsoft Internet Explorer") { // was set to = but it worked.
			    els[0]["onclick"] = new Function("windowobj.document.getElementById('submitform').menuindex.value = windowobj.document.getElementById('submitform').grade.selectedIndex; saveChangesAJAX('"+me+"', '"+parent+"', '"+course+"'); "); // IE
			} else {
			    els[0].setAttribute("onClick", "document.getElementById('submitform').menuindex.value = document.getElementById('submitform').grade.selectedIndex; return window.opener.saveChangesAJAX('"+me+"', '"+parent+"', '"+course+"')"); // Mozilla etc.
			}
			if (typeof(windowobj.document.getElementsByName('saveandnext')) != 'undefined') {// the saveandnext thing needs hiding 
				els2 = windowobj.document.getElementsByName('saveandnext');
				if (els2.length !== 0) {
					els2[0].style.display = "none";
					els3 = windowobj.document.getElementsByName('next');
					els3[0].style.display = "none";
				}
			}  
			timerVar = window.clearInterval(timerVar); // cancel the loop for this function
			//alert('done');
		}
	}
}


//////////////////////////////////////////////////////////////////
// workshop pop up stuff
//////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////
// function to add workshop onclick stuff and shut the pop up after its been graded.
// the pop -up goes to a redirect to display the grade, so we have to wait until 
// then before closing it so that the grade is processed properly.
///////////////////////////////////////////////////////////////////////////////////

// note: this looks odd because there are 2 things that needs doing, one after the pop up loads (add onclicks)and one after it goes to its redirect
// (close window).it is easier to check for a fixed url (i.e. the redirect page) than to mess around with regex stuff to detect a dynamic url, so the 
// else will be met first, followed by the if. The loop will keep running whilst the pop up is open, so this is not very elegant or efficient, but
// should not cause any problems unless the client is horribly slow. A better implementation will follow sometime soon.

function workshopOnload(me, parent, course) {
	var els ='';
	
	if (typeof(windowobj.frames[0]) != 'undefined') { //check that the frames are loaded - this can vary according to conditions
	    if (windowobj.frames[0].location.href != wwwroot+'/mod/workshop/assessments.php') { 
            // this is the early stage, pop up has loaded and grading is occurring
		    // annoyingly, the workshop module has not named its submit button, so we have to get it using another method as the 11th input
			els = windowobj.frames[0].document.getElementsByTagName('input');
			if (els.length == 11) { 
				els[10]["onclick"] = new Function("saveChangesAJAXFrames('"+me+"', '"+parent+"', '"+course+"');"); // IE
				//els[10].setAttribute("onClick", "saveChangesAJAXFrames('"+me+"', '"+parent+"', '"+course+"')"); // Mozilla etc
				timerVar = window.clearInterval(timerVar);	// cancel loop
				timerVar=self.setInterval('workshopAfterLoad()', 500); // set loop for next function that will close pop up on location change
			}
		}
	}
}



///////////////////////////////////////////////////////////////////////////////////////////////////////
// function to add onclick stuff to the forum ratings button. This button also has no name or id so we 
// identify it by getting the last tag in the array of inputs. The function is triggered on an interval
// of 1/2 a second until it manages to close the pop up after it has gone to the confirmation page
///////////////////////////////////////////////////////////////////////////////////////////////////////

function forumOnload(me, parent, course) {
	var els ='';
// first, add the onclick if possible
	if (typeof(windowobj.document.getElementsByTagName('input')) != 'undefined') { // window is open with some input. could be loading lots though.
	 //   if (window.opener) {
	    	els = windowobj.document.getElementsByTagName('input');
		//} else {
	//		els = document.getElementsByTagName('input');
	//	}
		if (els.length > 0) {
			var key = els.length -1;
			//alert(els[key].value);
			if (els[key].value == forumSaveString) { // does the last input have the 'send in my ratings string as label, showing that all the rating are loaded?
				
				els[key].setAttribute("onClick", "return saveChangesAJAX('"+me+"', '"+parent+"', '"+course+"')"); // mozilla and all other good browsers
				els[key]["onclick"] = new Function("return saveChangesAJAX('"+me+"', '"+parent+"', '"+course+"');"); // IE
				//alert('forum alfter function');

				timerVar = window.clearInterval(timerVar); // cancel loop for this function
				timerVar=self.setInterval('forumAfterLoad()', 500); // set loop for next function that will close pop up on location change
			}
		}
	}
}

function quizOnload(me, parentVar, quiz, course) {
	var els = '';
	var lastButOne = '';
	t = t + 1;
	
	//alert('course= '+course);
	if (typeof(windowobj.document.getElementsByTagName('input')) != 'undefined') { // window is open with some input. could be loading lots though.
		els = windowobj.document.getElementsByTagName('input');
	
		//alert(els.length);
		if (els.length > 14) { // there is at least the DOM present for a single attempt, but if the student has made a couple of attempts,
					// there will be a larger window.
			lastButOne = els.length - 1;
			if (els[lastButOne].value == quizSaveString) {
				//alert('value match '+me+' '+parentVar+' '+quiz+' '+course);
				
				// the onclick carries out the functions that are already specified in lib.php, followed by the function to update the tree
				var name = navigator.appName;
				if (name == "Microsoft Internet Explorer") { // was set to = but it worked.
				els[lastButOne]["onclick"] = new Function("saveChangesAJAXquiz('"+me+"', '"+parentVar+"', '"+quiz+"', '"+course+"'); "); // IE
				} else {
					els[lastButOne].setAttribute("onClick", "window.opener.saveChangesAJAXquiz('"+me+"', '"+parentVar+"', '"+quiz+"', '"+course+"')"); // Mozilla etc.
				}
				timerVar = window.clearInterval(timerVar); // cancel the loop for this function
				timerVar=self.setInterval('quizAfterLoad()', 500);
				//alert('done');
			}
		} 
	}
}

function journalOnload(me, parent) {
	var els ='';
// first, add the onclick if possible
	if (typeof(windowobj.document.getElementsByTagName('input')) != 'undefined') { // window is open with some input. could be loading lots though.
	 //   if (window.opener) {
	    	els = windowobj.document.getElementsByTagName('input');
		//} else {
	//		els = document.getElementsByTagName('input');
	//	}
		if (els.length > 0) {
			var key = els.length -1;
			//alert(els[key].value);
			if (els[key].value == journalSaveString) { // does the last input have the 'send in my ratings string as label, showing that all the rating are loaded?
				
				els[key].setAttribute("onClick", "return saveChangesAJAXjournal('"+me+"', '"+parent+"')"); // mozilla and all other good browsers
				els[key]["onclick"] = new Function("return saveChangesAJAXjournal('"+me+"', '"+parent+"');"); // IE
				//alert('forum alfter function');

				timerVar = window.clearInterval(timerVar); // cancel loop for this function
				timerVar=self.setInterval('journalAfterLoad()', 500); // set loop for next function that will close pop up on location change
			}
		}
	}
}

function quizAfterLoad() { //may be possible to replace this loop with a dom event listener
	if (windowobj.closed) {//prevents this loop from continuing indefinitely if the window is closed manually before grading
		timerVar = window.clearInterval(timerVar);
	}
	if (!windowobj.closed && windowobj.location.href == wwwroot+'/mod/quiz/report.php') {
		setTimeout('windowobj.close()', 1000);
		timerVar = window.clearInterval(timerVar);
	} 
}

function forumAfterLoad() { 
	if (windowobj.closed) {//prevents this loop from continuing indefinitely if the window is closed manually before grading
		timerVar = window.clearInterval(timerVar);
	}
	if (!windowobj.closed && windowobj.location.href == wwwroot+'/mod/forum/rate.php') {
		setTimeout('windowobj.close()', 1000);
		timerVar = window.clearInterval(timerVar);
	} 

}

function workshopAfterLoad() {
	if (windowobj.closed) { //prevents this loop from continuing indefinitely if the window is closed manually before grading
		timerVar = window.clearInterval(timerVar);
	}
	if (!windowobj.closed && windowobj.frames[0].location.href == wwwroot+'/mod/workshop/assessments.php') { // is this the later stage after the redirect? - in which case we close it
		windowobj.frames[0].onload = setTimeout('windowobj.close()', 1500);             // after 1.5 seconds so it hasn't the chance to redirect. may need 
																						// adjusting if the timeout setting for a site is very low
	    timerVar = window.clearInterval(timerVar);	// cancel loop - both conditions have been met now.
	} 
}

function journalAfterLoad() { 
	if (windowobj.closed) {//prevents this loop from continuing indefinitely if the window is closed manually before grading
		timerVar = window.clearInterval(timerVar);
	}
	if (!windowobj.closed && windowobj.location.href == wwwroot+'/mod/journal/report.php') {
		setTimeout('windowobj.close()', 1000);
		timerVar = window.clearInterval(timerVar);
	} 

}
		

